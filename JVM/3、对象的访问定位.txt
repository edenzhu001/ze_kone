我们建立对象就是为了使用对象，java程序通过虚拟机栈(局部变量表）上的reference引用
来操作java堆上的具体对象。

Object a = new Object();

java栈[虚拟机栈]中保存的是对象的引用， (局部变量表，操作栈，方法出口等等)
java堆中保存的是对象实例，并且还有对象对应的类型数据信息的地址。
而这个类型数据是保存在方法区中的，类型数据包括对象类型，父类，实现的接口，方法等等)。


对象的访问方式由虚拟机实现来定。一般是两种：1.使用句柄 2.直接指针

1.句柄：
    如果使用句柄，java堆中会划分出一块内存做为句柄池，reference中存储的就是对象的句柄地址。
    句柄中就包含了对象实例数据地址和类型数据具体地址(方法区中，方法区中存放的是类的基本信息->对象类型、父类、 实现的接口、方法)
    如图： 
    
    
2.直接指针
    直接指针的方式就是java栈中引用是java堆中的对象地址，而这个内存中除了对象实例，还有个地址，类型数据的地址。通过它可以
    在方法区中找到该对象对应的类型数据(对象类型，父类，实现的接口，方法等等)
    如图：
    
    
 对象的访问方式各有优势：
           使用句柄方法来访问对象最大的好处就是reference存储的是句柄地址，对象被移动时，只会改变句柄中对象的指针，reference本身不修改。
           
           直接指针方式最大的好处就是快，可以通过reference直接找到对象实例，节省指针定位的时间开销。
           
      
  重点补充：
      一、String类 和常量池
        
        1.String对象2种创建方式：
                String str = "aaa"; // 先检查字符串常量池中有没有'aaa'，如果常量池中没有，则需要在常量池中创建，然后 str指向字符串池中的对象。
                                                                     如果有，则直接str指向字符串常量池中的'aaa'。
                
                String str1 = new String("aaa");// 堆中创建新的对象
                String str2 = new String("aaa");// 堆中创建新的对象
                
                3个字符串变量都不相等。
                
        总结：
            第一种方式： 在常量池中拿对象。
            第二种方式：直接在java堆中内存空间创建一个新的对象
            
         记住：只要使用new 方法就会创建新的对象。
         
         
       2.String类型的常量池比较特殊。主要使用方法2种：
                        
                  (1)直接使用双引号声明出来的String对象会直接存储在常量池中。
                  (2)如果不是用双引号，那么可以使用String提供的intern()方法。
                  String.intern()是一个native方法，JNI。
                  String s1 = new String("aaaa");
                  String s2 = s2.intern();// 如果常量池中没有，则在常量池中创建对象，并返回该引用。有则返回常量池中该对象的引用。
                  String s3 = "aaaa";
                  sout(s2);// aaaa
                  sout(s1 == s2);//false
                  sout(s3 == s2);//true
                  
       3.字符串拼接：
               String str1 = "str";
               String str2 = "ing";
               
               String str3 = "str"+"ing"; // 常量池中对象
               String str4 = str1 + str2;// 在java堆上创建新的对象
               String str5 = "string"; // 常量池中的对象
               
               sout(str3 == str4);//false
               sout(str3 == str5);//true
               sout(str4 == str5);//false
               
               上述变量引用都在java栈中，str1 str2 str3，str5都在常量池中。 str4是在java堆中。
        因此要尽量避免多个字符串拼接，因为这样会重新创建对象。如果要改变字符串可以使用StringBuffer  StringBuilder。
        
        
      4. String s1 = new String("abc"); 创建了几个字符串对象。
            将创建 1 或 2 个字符串。如果池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。
            如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。
                        String s1 = new String("abc");// 堆内存的地址值
                        String s2 = "abc";
                        System.out.println(s1 == s2);// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。
                        System.out.println(s1.equals(s2));// 输出 true
                        
    二、8种基本类型的包装类 和 常量池
        java中基础类型的包装类大部分实现了常量池技术范围为[-128,127] 2^6，有
                Byte Character Short Integer Long Boolean
        而浮点数据Float Double没有实现常量池技术。
        
        Integer i1 = 33;
        Integer i2 = 33;
        sout(i1 == i2);//true
        
        Integer i33 = 133;
        Integer i44 = 133;
        sout(i33 == i44);//false
        
        Double d3 = 1.2;
        Double d4 = 1.2;
        sout(d3 == d4);//false
        
        
        
        
        
               
                        
                        
        

