 我们现在知道Redis很快，除了Redis是数据存储在内存中的以外，
 跟它是单线程有没有关系？来，了解一下。
 
 
 一、前言
    缓存问题：二八定律、热数据和冷数据、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等等。
   缓存服务器除了Redis 还有memcached
   
 二、简介
    Redis是一种内存中的数据结构的存储系统。用途：数据库，缓存，消息中间件。
    多种数据类型：String list hash set zset
    
    Redis 内置了复制（Replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（Transactions） 
    和不同级别的磁盘持久化（Persistence），
    并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（High Availability）。
    
    redis支持持久化，可以把内存中的数据保存到磁盘中。方式：快照和AOF
    
    Rdis将数据存储在内存中，所有读写速度极快。
    
    
 三、Redis有多快
      Redis采用的是基于内存的单进程单线程模型kv数据库，C预言编写。QPS(每秒查询)可达10W+.
      
      10000连接数大概的查询次数80000-90000
      
 四、为什么这么快呢
     1.完全基于内存，绝大部分请求是纯内存操作。数据在内存中，类似于hashmap。hashmap的优势就是查找和操作的时间复杂度都是O(1);
     2.数据结构简单，对数据的操作也简单
     3.采用单线程，避免了不必要的上下文切换，或者是多进程 多线程导致的切换而消耗CPU，不用考虑各种锁的问题，因而不会出现死锁而消耗性能
     4.使用多路I/O复用模型，非阻塞IO【重点】
     5.底层模型不同，这个以后再细看。
     
     解疑：
      (1)多路I/O复用模型
          多路I/O复用模型是指利用select poll epoll可以同时监察多个流的I/O事件的能力。
          在空闲的时候，会把当前线程阻塞掉；当有一个或多个流有I/O事件时，就从阻塞态中唤醒，
          于是程序就会轮询一遍所有的流(epoll是只轮询那些真正发出了事件的流)，并且只依次顺序的处理就绪的流，
          这就避免了大量的无用操作。
          
          这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。
          采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），
          且 Redis 在内存中操作数据的速度非常快，也就是说内存内的操作不会成为影响Redis性能的瓶颈，
          主要由以上几点造就了 Redis 具有很高的吞吐量。
          
          场景：
              因为Redis是跑在单线程中的，所有的操作都是顺序执行的，但是由于用户的输入输出都是阻塞的，
              所以I/O操作在一般情况下往往不能直接返回，这会导致无法给其他的用户提供服务。
              
              此时需要 多路I/O复用。
              多路是指 多个网络连接，复用是指复用同一个单线程。 这样可以让单个线程高效的处理多个连接请求(尽量减少网络IO时间消耗)
      
      
    
   
    
