前面2节讲了ArrayList LinkedList 现在来看 HashMap 这个是面试 必问的东西 要认真看 看懂才行...

一、HashMap简介
   HashMap主要是用来存放键值对的，它是基于Hash表的Map接口来实现的。
    JDK1.8以前HashMap是 数组+链表组成，数组是HashMap的主体，链表主要是解决Hash冲突而存在(拉链法解决冲突)
    
    JDK1.8以后，在解决Hash冲突时有了变化，  当链表长度大于阈值(默认为8)，将链表转为红黑树，以减少搜索时间
    
二、底层结构原理
    1、在1.8以前，HashMap是数组+链表结合在一起 也就是链表散列。
      (1)HashMap要利用哈希函数来确定Entry的插入的位置也就是Entry的索引,例如put("hello",0),插入一个key为hello的元素.
        hanhMap内部会通过哈希函数将hello得到一个值,这个值就是数组中的index。为什么是散列？因为这个index并不一定是连续的。
        这样就可以把Entry对象插入到数组中。
        (2)但是这样有问题，因为数组长度有限，当Entry越来越多，就会得到相同的索引，就发生了索引冲突。
        HashMap这样来解决，数组中存放的是一个链表的头结点，每一个Entry可以通过next找到下一个节点的位置，从而找到下一个拥有相同index的Entry。所以当产生相同
        的index时，再比较key值。若key值相等则直接覆盖，否则直接添加到链表头部，以解决冲突。
        这就是【拉链法解决hash冲突】,链表和数组相结合。而桶的概念就是这个链表，桶的深度就是链表的长度。

      需要注意的是 插入的位置是头部。TODO疑问。
      
      所谓 “拉链法” 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。

      HashMap如何使数据均匀分布,HashMap的扩容 TODO
    
    2、如何得到索引 => 每个对象的hashcode值 经过hash()也就是扰动函数，得到索引index
      HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) & hash 判断当前元素存放的位置，即索引。
      所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 ，
      换句话说使用扰动函数之后可以减少碰撞。
      扰动方法比较：  
      JDK1.8的hash方法：
            static final int hash(Object key) {
                int h;
                // key.hashCode()：返回散列值也就是hashcode
                // ^ ：按位异或   参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。
                // >>>:无符号右移，忽略符号位，空位都以0补齐
                return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
            }
      对比一下JDK1.7的hash方法
            static int hash(int h) {
                // This function ensures that hashCodes that differ only by
                // constant multiples at each bit position have a bounded
                // number of collisions (approximately 8 at default load factor).

                h ^= (h >>> 20) ^ (h >>> 12);
                return h ^ (h >>> 7) ^ (h >>> 4);
            }
      相对来说，JDK8的hash方法性能会稍微优于jdk7，因为7毕竟扰动了4次。
      
    3、jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。
      所以 1.8HashMap的底层结构是【数组+链表+红黑树】，数组长度默认为16，接受null值，非线程安全。
       二叉查找树->左子节点小于父节点，右子节点大于父节点，查找的最大次数等于树的高度，复杂度为O(lg(n))
       为了防止退化，形成单链，红黑树出现。
       红黑树->自平衡的二叉查找树：从根节点到叶子节点的最大长度不会超过最小长度的2倍，确保达到平衡。使得树的高度最低，减少搜索复杂度。
       稍后会有个章节来讲一下这个树结构。
       
    4、由它的部分源码 来解答=>
       类属性：
            public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {
                // 序列号
                private static final long serialVersionUID = 362498820763181265L; 
                
                // 默认的数组的初始容量是16=2^4
                static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;   
                
                // 最大容量 2^30
                static final int MAXIMUM_CAPACITY = 1 << 30; 
                
                // 默认的填充因子
                static final float DEFAULT_LOAD_FACTOR = 0.75f;
                
                // 当【桶(bucket)】上的结点数大于这个值时会转成红黑树，这个桶说的就是链表，也就是链表的长度大于这个阈值8就会转换为红黑树
                static final int TREEIFY_THRESHOLD = 8; 
                
                // 当桶(bucket)上的结点数小于这个值时树转链表
                static final int UNTREEIFY_THRESHOLD = 6;
                
                // 桶中结构转化为红黑树对应的table的最小大小 当数组长度大于64时，链表都会转化为红黑树
                static final int MIN_TREEIFY_CAPACITY = 64;
                
                // 存储元素的数组table，长度总是2的幂次倍
                transient Node<k,v>[] table; 
                
                // 存放具体元素的集 TODO 疑问
                transient Set<map.entry<k,v>> entrySet;
                
                // 存放元素的个数，注意这个不等于数组的长度。是所有的元素
                transient int size;
                
                // 每次扩容和更改map结构的计数器
                transient int modCount;   
                
                // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容。实际大小是指元素数量，也就是size，容量是指数组容量
                int threshold;
                
                // 加载因子
                final float loadFactor;
            }
            
            加载因子
            loadFactor是用来控制数组存放数据的疏密程度。范围为[0,1] 越趋近于1，那么数组中存放的数据(Entry)也就越多，越密，也就是会让链表长度增加；
            越小的话，趋近于0，数组中存放的数据(entry)也就越少，越稀疏。
            loadFactor太大导致链表过长 查找效率低，太小会导致数组的利用率太低，存放的数据很分散。
            默认值为0.75f，给定的默认容量是16。Map在使用过程中不断地往里面放数据，但数量达到16*0.75=12时，就需要将当前容量16扩容。
            扩容过程需要rehash,复制数组数据等，非常消耗性能。
            
            threshold临界值
            threshold=capacity*loadFactor，当size >= threshold时 需要对数组扩增了。
            
            【Node节点类】源码：
            
               // 继承自 Map.Entry<K,V>，存放在数组中的节点
               static class Node<K,V> implements Map.Entry<K,V> {
                      final int hash;// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较
                      final K key;//键
                      V value;//值
                      // 指向下一个节点
                      Node<K,V> next;
                      Node(int hash, K key, V value, Node<K,V> next) {
                           this.hash = hash;
                           this.key = key;
                           this.value = value;
                           this.next = next;
                       }
                       public final K getKey()        { return key; }
                       public final V getValue()      { return value; }
                       public final String toString() { return key + "=" + value; }
                       // 重写hashCode()方法
                       public final int hashCode() {
                           return Objects.hashCode(key) ^ Objects.hashCode(value);
                       }

                       public final V setValue(V newValue) {
                           V oldValue = value;
                           value = newValue;
                           return oldValue;
                       }
                       // 重写 equals() 方法
                       public final boolean equals(Object o) {
                           if (o == this)
                               return true;
                           if (o instanceof Map.Entry) {
                               Map.Entry<?,?> e = (Map.Entry<?,?>)o;
                               if (Objects.equals(key, e.getKey()) &&
                                   Objects.equals(value, e.getValue()))
                                   return true;
                           }
                           return false;
                       }
               }
               
               //【树节点类源码】：(暂时看不出来是红黑树)
               static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {
                       TreeNode<K,V> parent;  // 父节点
                       TreeNode<K,V> left;    // 左
                       TreeNode<K,V> right;   // 右 
                       TreeNode<K,V> prev;    //  //前方结点 ，needed to unlink next upon deletion
                       boolean red;           // 颜色
                       TreeNode(int hash, K key, V val, Node<K,V> next) {
                           super(hash, key, val, next); // next是后续节点  上面的prev是前方节点，所以是双向链表
                       }

                       /**
                        * 返回根节点
                        */
                       final TreeNode<K,V> root() {
                           for (TreeNode<K,V> r = this, p;;) {
                               if ((p = r.parent) == null)
                                   return r;
                               r = p;
                           }
                       }
                       ......
                 }
     
     三、HashMap源码分析
         4个构造方法分别如下：
             // 默认构造函数。
             public HashMap() {
                 this.loadFactor = DEFAULT_LOAD_FACTOR; // all   other fields defaulted 0.75的加载因子，16的容量大小
              }
            
             // 包含另一个“Map”的构造函数
              public HashMap(Map<? extends K, ? extends V> m) {
                  this.loadFactor = DEFAULT_LOAD_FACTOR;
                  putMapEntries(m, false);//下面会分析到这个方法
              }
            
             // 指定“容量大小”的构造函数
              public HashMap(int initialCapacity) {
                  this(initialCapacity, DEFAULT_LOAD_FACTOR);
              }
    
             // 指定“容量大小”和“加载因子”的构造函数
              public HashMap(int initialCapacity, float loadFactor) {
                  if (initialCapacity < 0)
                      throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);
                  if (initialCapacity > MAXIMUM_CAPACITY) // 2^30
                      initialCapacity = MAXIMUM_CAPACITY;
                  if (loadFactor <= 0 || Float.isNaN(loadFactor))
                      throw new IllegalArgumentException("Illegal load factor: " + loadFactor);
                  this.loadFactor = loadFactor;
                  this.threshold = tableSizeFor(initialCapacity);
              }
              
          putMapEntries方法：将一个map中的元素加到本map中。
             
             final void putMapEntries(Map<? extends K, ? extends V> m, boolean evict) {
                int s = m.size();
                if (s > 0) {
                    // 判断table是否已经初始化
                    if (table == null) { // pre-size
                        // 未初始化，s为m的实际元素个数
                        float ft = ((float)s / loadFactor) + 1.0F;
                        int t = ((ft < (float)MAXIMUM_CAPACITY) ?     // 计算得出的是容量
                                (int)ft : MAXIMUM_CAPACITY);
                        // 计算得到的容量t 大于 阈值，则初始化阈值
                        if (t > threshold)
                            threshold = tableSizeFor(t); // 由容量得出阈值
                    }
                    // 已初始化，并且m元素个数大于阈值，进行扩容处理
                    else if (s > threshold)
                        resize();
                    // 将m中的所有元素添加至HashMap中
                    for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
                        K key = e.getKey();
                        V value = e.getValue();
                        putVal(hash(key), key, value, false, evict);// 构造方法中evict为false 
                    }
                }
            }
        
        put方法
         HashMap中只提供了put方法用于添加元素，putVal()方法只是给put方法调用的一个方法，并没有提供给用户使用。
         
        对putVal()方法添加元素的分析如下：
            (1)如果定位到的数组位置没有元素，就直接插入
            (2)如果定位到的数组位置有元素 就要和要插入的key做比较，如果key相同就直接覆盖；如果不相同就判断p是否是一个树节点。
               如果是树节点，就调用 e = ((TreeNode<K,V>)p).putTreeVal(this,tab,hash,key,value)将元素添加进入。
               如果不是树节点，就遍历链表插入(插入的是【链表尾部】)
       
       源码如下：        
            public V put(K key, V value) {
                return putVal(hash(key), key, value, false, true);
            }
            
            // onlyIfAbsent：if true,当键相同时，不修改已存在的值
            final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                               boolean evict) {
                Node<K,V>[] tab; Node<K,V> p; int n, i;
                
                
                // 本map中的数组table未初始化或者长度为0，进行扩容
                if ((tab = table) == null || (n = tab.length) == 0)
                    n = (tab = resize()).length;
                    
                // (n - 1) & hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
                // (n-1)&hash 这个操作表示值得范围[0,15]。由按位与操作来决定的
                if ((p = tab[i = (n - 1) & hash]) == null)
                
                     // 生成第一个节点，next为null
                    tab[i] = newNode(hash, key, value, null);
                    
                // 桶中已经存在元素
                else {
                    Node<K,V> e; K k;
                    // 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
                    if (p.hash == hash &&   // hash值相等
                        ((k = p.key) == key || (key != null && key.equals(k))))   //key值也相等用 = 和equals一起认定
                            // 将第一个元素赋值给e，用e来记录
                            e = p;
                            
                    // hash值不相等，即key不相等；为红黑树结点
                    else if (p instanceof TreeNode)
                        // 放入树中
                        e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
                    // 为链表结点
                    else {
                        // 在链表最末插入结点
                        for (int binCount = 0; ; ++binCount) {
                            // 到达链表的尾部
                            if ((e = p.next) == null) {
                                // 在尾部插入新结点
                                p.next = newNode(hash, key, value, null);
                                // 结点数量达到阈值，转化为红黑树
                                if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                                    treeifyBin(tab, hash);
                                // 跳出循环
                                break;
                            }
                            // 判断链表中结点的key值与插入的元素的key值是否相等
                            if (e.hash == hash &&
                                ((k = e.key) == key || (key != null && key.equals(k))))
                                // 相等，跳出循环
                                break;
                            // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表
                            p = e;
                        }
                    }
                    // 表示在桶中找到key值、hash值与插入元素相等的结点
                    if (e != null) { 
                    
                        // 记录e的value
                        V oldValue = e.value;
                        
                        // onlyIfAbsent为false或者旧值为null
                        if (!onlyIfAbsent || oldValue == null)
                            //用新值替换旧值
                            e.value = value;
                            
                        // 回调以允许LinkedHashMap后置操作  TODO疑问
                        afterNodeAccess(e);
                        // 返回旧值
                        return oldValue;
                    }
                }
                //  更改操作次数
                ++modCount;
                // 实际大小大于阈值则扩容
                if (++size > threshold)
                    // 将数组大小设置为原来的2倍，并将原先的数组中的元素放到新数组中
                    // 因为有链表，红黑树之类，因此还要调整他们
                    resize();
                // 回调以允许LinkedHashMap后置操作   TODO疑问
                afterNodeInsertion(evict);
                return null;
            } 
       
         再来对比一下1.7的put()方法
         (1)如果定位到的数组位置没有元素，直接插入
         (2)如果定位到的数组位置有元素,遍历以这个元素为头节点 的链表，依次和插入的key比较，如果key相同就直接覆盖，
         不同的是【头插法】插入元素。
              public V put(K key, V value)
                   if (table == EMPTY_TABLE) { 
                   // 初始化为一个长度为16的数组
                   inflateTable(threshold); 
               }  
                   if (key == null)
                        // 添加key为null的元素到这个数组中的第一个元素table[0],会有遍历这个链表，
                       return putForNullKey(value);
                   int hash = hash(key);
                   
                   // 获取到桶的位置 也就是数组的下标
                   int i = indexFor(hash, table.length);
                   
                   // 遍历桶中的链表
                   for (Entry<K,V> e = table[i]; e != null; e = e.next) { // 先遍历
                       Object k;
                       if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {  // 在桶中找到了相同的key,直接覆盖value并返回旧的value
                           V oldValue = e.value;
                           e.value = value;
                           e.recordAccess(this);
                           return oldValue; 
                       }
                   }

                   modCount++;
                   addEntry(hash, key, value, i);  // 在桶中没有找到相同的key,再插入
                   return null;
               }
               
            get()方法：
               public V get(Object key) {
                      Node<K,V> e;
                      return (e = getNode(hash(key), key)) == null ? null : e.value;
                  }

                  final Node<K,V> getNode(int hash, Object key) {
                      Node<K,V>[] tab; Node<K,V> first, e; int n; K k;
                      if ((tab = table) != null && (n = tab.length) > 0 &&
                          (first = tab[(n - 1) & hash]) != null) {    // (n-1)&hash直接得到桶位置，也就是数组的下标。因为putVal方法中即使这样计算出桶的位置的
                          // 数组元素相等
                          if (first.hash == hash && // always check first node
                              ((k = first.key) == key || (key != null && key.equals(k))))
                              return first;
                          // 桶中不止一个节点
                          if ((e = first.next) != null) {
                              // 在树中get
                              if (first instanceof TreeNode)
                                  return ((TreeNode<K,V>)first).getTreeNode(hash, key);
                              // 在链表中get 链表遍历循环
                              do {
                                  if (e.hash == hash &&
                                      ((k = e.key) == key || (key != null && key.equals(k))))
                                      return e;
                              } while ((e = e.next) != null);
                          }
                      }
                      return null;
                  }
            
            resize()方法源码：
                  resize是扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，非常耗时。应该尽量避免resize。
               
               final Node<K,V>[] resize() {
                      Node<K,V>[] oldTab = table; // 原数组
                      int oldCap = (oldTab == null) ? 0 : oldTab.length; //原容量
                      int oldThr = threshold;  // 原阈值
                      int newCap, newThr = 0;
                      
                      //原容量
                      if (oldCap > 0) {
                          // 超过最大值2^30就不再扩充了，就只好随你碰撞去吧
                          if (oldCap >= MAXIMUM_CAPACITY) { 2^30
                              threshold = Integer.MAX_VALUE;  // 2^31-1
                              return oldTab;
                          }
                          // 没超过最大值，容量就扩充为原来的2倍；阈值也扩大为原阈值的2倍。
                          else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)
                              newThr = oldThr << 1; // double threshold
                      }
                      else if (oldThr > 0) // 原容量为0但原阈值大于0，则把原阈值赋值为新容量
                          newCap = oldThr;
                      else { 
                          // signifies using defaults
                          newCap = DEFAULT_INITIAL_CAPACITY;
                          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
                      }
                      // 计算新的resize上限
                      if (newThr == 0) {
                          float ft = (float)newCap * loadFactor;
                          newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);
                      }
                      threshold = newThr;
                      @SuppressWarnings({"rawtypes","unchecked"})
                          Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
                      table = newTab;  //得到新的数组
                      if (oldTab != null) {
                          // 把每个bucket都移动到新的buckets中
                          for (int j = 0; j < oldCap; ++j) {
                              Node<K,V> e;
                              if ((e = oldTab[j]) != null) {
                                  oldTab[j] = null;
                                  if (e.next == null) // 单节点，直接移到新数组中
                                      newTab[e.hash & (newCap - 1)] = e;
                                  else if (e instanceof TreeNode) // 红黑树，则把这棵树重新放入新数组的j位置
                                      ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                                  else { // 链表
                                      Node<K,V> loHead = null, loTail = null;
                                      Node<K,V> hiHead = null, hiTail = null;
                                      Node<K,V> next;  *********************************************to continue
                                      do {
                                          next = e.next;
                                          // 原索引
                                          if ((e.hash & oldCap) == 0) {
                                              if (loTail == null)
                                                  loHead = e;
                                              else
                                                  loTail.next = e;
                                              loTail = e;
                                          }
                                          // 原索引+oldCap
                                          else {
                                              if (hiTail == null)
                                                  hiHead = e;
                                              else
                                                  hiTail.next = e;
                                              hiTail = e;
                                          }
                                      } while ((e = next) != null);
                                      // 原索引放到bucket里
                                      if (loTail != null) {
                                          loTail.next = null;
                                          newTab[j] = loHead;
                                      }
                                      // 原索引+oldCap放到bucket里
                                      if (hiTail != null) {
                                          hiTail.next = null;
                                          newTab[j + oldCap] = hiHead;
                                      }
                                  }
                              }
                          }
                      }
                      return newTab;
                  }
                
   
