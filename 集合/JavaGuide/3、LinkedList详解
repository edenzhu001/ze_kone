上节给大家说了 ArrayList，回顾一下。
  讲到集合，我们可以从以下几个方面去分析：
    数据结构、增删改查时间复杂度、初始容量 扩容机制 扩容时间、线程安全、元素是否可为null 是否重复 是否有序、继承父类实现接口。
    ArrayList和LinkedList都是线性列表，有序集合。ArrayList继承AbstractList实现List接口(增删改查遍历)，实现了Cloneable(克隆) 
    Serializable(支持序列化，通过序列化传输) 实现了RandomAccess接口(支持快速随机访问)
  
  现在来说说LinkedList。
  
  一、简介
    LinkedList是一个实现了List和Deque接口的双端链表。
    LinkedList底层结构是【链表结构】支持它高效的【插入】和【删除】。另外它实现了Deque接口，也具有队列的特性。
    LinkedList不是线程安全的，若想要得到线程安全的list 静态类Collections 
                                    List list = Collections.synchronizedlist(new LinkedList(...));
  二、内部结构分析
    LinkedList是链表，所以由一个个节点串起来。每个节点上有存储的值，同时也有前后节点位置的值。
      ———————————————————+—————————+——————————————————
      |前一个节点位置的值|  |value|  |后一个节点位置的值|
      ———————————————————+—————————+——————————————————
      
    LinkedList有个内部私有类Node
          private static class Node<E> {
              E item;//节点值
              Node<E> next;//后继节点
              Node<E> prev;//前驱节点

              Node(Node<E> prev, E element, Node<E> next) {
                  this.item = element;
                  this.next = next;
                  this.prev = prev;
              }
          }
    这个类就代表双端链表的节点Node。有三个属性，分别是前驱节点、本节点的值、后驱节点
    
    
    三、LinkedList源码
        package java.util;

        import java.util.function.Consumer;

        public class LinkedList<E>
            extends AbstractSequentialList<E>
            implements List<E>, Deque<E>, Cloneable, java.io.Serializable
        {
            transient int size = 0;

            /**首节点
             * Pointer to first node.
             * Invariant: (first == null && last == null) ||
             *            (first.prev == null && first.item != null)
             */
            transient Node<E> first;

            /**尾节点
             * Pointer to last node.
             * Invariant: (first == null && last == null) ||
             *            (last.next == null && last.item != null)
             */
            transient Node<E> last;

            /**
             * 构造方法
             */
            public LinkedList() {
            }

            /**
             * 用已有集合创建链表的构造方法
             */
            public LinkedList(Collection<? extends E> c) {
                this();
                addAll(c);
            }

            /**
            * 将元素添加到尾部
            *
            **/
            public boolean add(E e) {
                linkLast(e); //调用linkLast
                return true;
            }

            /**在头部添加节点
             * Links e as first element.
             */
            private void linkFirst(E e) {
                final Node<E> f = first;
                final Node<E> newNode = new Node<>(null, e, f);
                first = newNode;// 新建节点
                if (f == null)  // 若 f == null ，即第一个节点为空，则表示链表中没有节点
                    last = newNode;
                else
                    f.prev = newNode;//指向前驱元素也就是指向上一个元素
                size++;
                modCount++;
            }

            /**
             * 添加节点到尾部，对外部提供
             */
            public void addLast(E e) {
                linkLast(e);
            }

            /**在尾部添加节点，内部使用
             * Links e as last element.
             */
            void linkLast(E e) {
                final Node<E> l = last;
                final Node<E> newNode = new Node<>(l, e, null);
                last = newNode;// 新建节点
                if (l == null)   若 f == null ，即最后一个节点为空，则表示链表中没有节点
                    first = newNode;
                else
                    l.next = newNode;//指向后继元素也就是指向下一个元素
                size++;
                modCount++;
            }
            
             /**
             * 在指定位置添加元素
             *
             **/
             public void add(int index, E element) {
                checkPositionIndex(index); // 检查索引是否在[0,size]之间

                if (index == size) // 则表示在最后多添加一个节点
                    linkLast(element);
                else
                    linkBefore(element, node(index));// element, 指定的node
            }
            
            linkBefore的2个入参是(1)要插入节点的值，指定的节点node。

              /** 返回小标位置为index的节点，下标从0 开始
             * Returns the (non-null) Node at the specified element index.
             */
            Node<E> node(int index) {
                // assert isElementIndex(index);

                if (index < (size >> 1)) {
                    Node<E> x = first;
                    for (int i = 0; i < index; i++)// 循环遍历
                        x = x.next;
                    return x;
                } else {
                    Node<E> x = last;
                    for (int i = size - 1; i > index; i--)// 循环遍历
                        x = x.prev;
                    return x;
                }
            }

            /**在succ节点前 插入新节点，若succ前没有节点，则新节点为首节点
             * Inserts element e before non-null Node succ.
             */
            void linkBefore(E e, Node<E> succ) {
                // assert succ != null;
                final Node<E> pred = succ.prev;
                final Node<E> newNode = new Node<>(pred, e, succ);
                succ.prev = newNode;
                if (pred == null)
                    first = newNode;
                else
                    pred.next = newNode;
                size++;
                modCount++;
            }

            /**
             * 将集合插入到链表尾部
             */
            public boolean addAll(Collection<? extends E> c) {
                return addAll(size, c); // 将集合从指定位置开始插入
            }
            
            /**
             * 将集合从指定位置开始插入
             */
            public boolean addAll(int index, Collection<? extends E> c) {
                checkPositionIndex(index); // 校验index在[0,size]之间

                Object[] a = c.toArray(); // 集合中的数据转到 数组中
                int numNew = a.length;
                if (numNew == 0)
                    return false;

                Node<E> pred, succ; // 得到【插入位置】的前驱节点 和 后继节点
                if (index == size) { // 如果插入位置为尾部，前驱节点为last，后继节点为null
                    succ = null;
                    pred = last;
                } else { // 否则，调用node()方法得到后继节点，再得到前驱节点
                    succ = node(index);
                    pred = succ.prev;
                }
                
                // 遍历数据将数据插入
                for (Object o : a) {
                    @SuppressWarnings("unchecked") E e = (E) o;
                    Node<E> newNode = new Node<>(pred, e, null);
                    if (pred == null) // 若前驱节点为null  则表示在头部插入，则新节点就是头部节点
                        first = newNode;
                    else
                        pred.next = newNode;
                    pred = newNode;
                }

                if (succ == null) { // //如果插入位置在尾部，重置last节点
                    last = pred;
                } else {  //否则，将插入的链表与先前链表连接起来
                    pred.next = succ;
                    succ.prev = pred;
                }

                size += numNew;
                modCount++;
                return true;
            }
            
            从上述方法可以看出，addAll方法通常包含4步骤：
              (1)校验index
              (2)toArray()得到数组
              (3)得到插入位置的前驱节点和后继节点
              (4)遍历数据，插入指定位置
            
            /**
             * 通过索引获取节点数据
             */
            public E get(int index) {
                checkElementIndex(index);
                return node(index).item; // 找到节点，然后得出item
            }
            
            
             /**
             * 获取头部节点index=0数据方法，没有头结点就报错
             */
            public E getFirst() {
                final Node<E> f = first;
                if (f == null)
                    throw new NoSuchElementException();
                return f.item;
            }
            
            /**
             * 获取头部节点值，没有头结点就报错
             */
            public E element() {
                return getFirst();
            }
            
            /**
             * 获取头部节点值，若没有头部节点则返回null
             */
            public E peek() {
                final Node<E> f = first;
                return (f == null) ? null : f.item;
            }
            
            /**
             * 获取头部节点值，若没有头部节点则返回null
             */
            public E peekFirst() {
                final Node<E> f = first;
                return (f == null) ? null : f.item;
             }
            
            区别：对链表为空时的处理。getFirst() element() 会报错。peek() peekFirst() 会返回null
            
            /**
             * 获取尾部节点的值，若链表为空，则报错
             */
            public E getLast() {
                final Node<E> l = last;
                if (l == null)
                    throw new NoSuchElementException();
                return l.item;
            }
            
            /**
             * 获取尾部节点的值, 若链表为空，则返回null
             */
            public E peekLast() {
                final Node<E> l = last;
                return (l == null) ? null : l.item;
            }
            
             /**
             *   根据对象得到索引，从头部遍历查找，若没有则返回-1。注意：index初始值为0，在循环体中先判断 再index++
             */
            public int indexOf(Object o) {
                int index = 0;
                if (o == null) {
                    for (Node<E> x = first; x != null; x = x.next) {
                        if (x.item == null)
                            return index;
                        index++;
                    }
                } else {
                    for (Node<E> x = first; x != null; x = x.next) {
                        if (o.equals(x.item))
                            return index;
                        index++;
                    }
                }
                return -1;
            }
            
            /**
             * 根据对象得到索引，从尾部遍历。注意：index初始值为size，在循环体中先 index--再判断，
             */
            public int lastIndexOf(Object o) {
                int index = size;
                if (o == null) {
                    for (Node<E> x = last; x != null; x = x.prev) {
                        index--;
                        if (x.item == null)
                            return index;
                    }
                } else {
                    for (Node<E> x = last; x != null; x = x.prev) {
                        index--;
                        if (o.equals(x.item))
                            return index;
                    }
                }
                return -1;
            }

             /**
             * 判断是否包含某元素 
             * 里面就是调用元素在链表中的位置，不等于-1 则包含，等于-1则不包含。同样也是循环遍历是头部遍历
             */
            public boolean contains(Object o) {
                return indexOf(o) != -1;
            }
            
             /**
             * 删除头部节点
             */
            public E pop() {
                return removeFirst();
            }
            
            /**
             * 删除头部节点，并返回节点值
             */
            public E remove() {
                return removeFirst();
            }
            
            /**
             * 删除头部节点方法，若链表为空，则报错
             */
            public E removeFirst() {
                final Node<E> f = first;
                if (f == null)
                    throw new NoSuchElementException();
                return unlinkFirst(f);
            }
            
            /**
             * 断掉头部节点
             * 取出第二节点，清空头部节点item next。first=第二节点。若第二节点为空，则last= null.将first节点的前驱节点置为空。
             */
            private E unlinkFirst(Node<E> f) {
                // assert f == first && f != null;
                final E element = f.item;
                final Node<E> next = f.next;
                f.item = null;
                f.next = null; // help GC
                first = next;
                if (next == null)
                    last = null;
                else
                    next.prev = null;
                size--;
                modCount++;
                return element;
            }
            
            /**
             * 删除尾节点
             */
            public E removeLast() {
                final Node<E> l = last;
                if (l == null)
                    throw new NoSuchElementException();
                return unlinkLast(l);
            }
            
            /**
             * 删除尾节点，没有则返回null
             */
            public E pollLast() {
                final Node<E> l = last;
                return (l == null) ? null : unlinkLast(l);
            }
           
            /**
             *  断掉尾部节点
             * 获取倒数第二个节点，清空末节点的item prev . last = 倒数第二个节点. 若倒数第二个节点为null，则first=null，
             * 否则倒数第二个节点的next=null
             */
            private E unlinkLast(Node<E> l) {
                // assert l == last && l != null;
                final E element = l.item;
                final Node<E> prev = l.prev;
                l.item = null;
                l.prev = null; // help GC
                last = prev;
                if (prev == null)
                    first = null;
                else
                    prev.next = null;
                size--;
                modCount++;
                return element;
            }

            /**
             * 删除指定元素，一次只会删除一个指定元素。如果删除了返回true 否则返回false
             * 和根据指定元素获取索引类似。也是判断是否为null,然后头部遍历，找到元素equals的值然后处理
             */
            public boolean remove(Object o) {
                if (o == null) {
                    for (Node<E> x = first; x != null; x = x.next) {
                        if (x.item == null) {
                            unlink(x);
                            return true;
                        }
                    }
                } else {
                    for (Node<E> x = first; x != null; x = x.next) {
                        if (o.equals(x.item)) {
                            unlink(x);
                            return true;
                        }
                    }
                }
                return false;
            }

            /**
             * 断掉某个节点
             * 获得该节点的前后节点 prev next,
             * 将前驱节点的后继节点指向后继节点，
             * 将后继节点的前驱节点指向前驱节点
             */
            E unlink(Node<E> x) {
                // assert x != null;
                final E element = x.item;
                final Node<E> next = x.next;   //得到后继节点
                final Node<E> prev = x.prev;   //得到前驱节点

                //删除前驱指针
                if (prev == null) {
                    first = next;   //如果删除的节点是头节点,令头节点指向该节点的后继节点
                } else {
                    prev.next = next;   /将前驱节点的后继节点指向后继节点
                    x.prev = null;
                }

                //删除后继指针
                if (next == null) {
                    last = prev;  // 如果删除的节点是尾节点,令尾节点指向该节点的前驱节点
                } else {
                    next.prev = prev;  //将后继节点的前置节点指向前置节点
                    x.next = null;
                }

                x.item = null;
                size--;
                modCount++;
                return element;
            }
            
            /**
             * 删除指定索引的元素 
             * 索引遍历找到该元素，
             * 元素作为入参，unlink该元素  注意：凡是和index有关的，必然得先遍历找到对应的元素。indexOf()是由元素找到index，也是遍历
             */
            public E remove(int index) {
                checkElementIndex(index);
                return unlink(node(index));
            }
            
            /**
             * Returns the first element in this list.
             *
             * @return the first element in this list
             * @throws NoSuchElementException if this list is empty
             */
            public E getFirst() {
                final Node<E> f = first;
                if (f == null)
                    throw new NoSuchElementException();
                return f.item;
            }

            /**
             * Inserts the specified element at the beginning of this list.
             *
             * @param e the element to add
             */
            public void addFirst(E e) {
                linkFirst(e);
            }

            /**
             * Returns the number of elements in this list.
             *
             * @return the number of elements in this list
             */
            public int size() {
                return size;
            }

            /**
             * Removes all of the elements from this list.
             * The list will be empty after this call returns.
             */
            public void clear() {
                // Clearing all of the links between nodes is "unnecessary", but:
                // - helps a generational GC if the discarded nodes inhabit
                //   more than one generation
                // - is sure to free memory even if there is a reachable Iterator
                for (Node<E> x = first; x != null; ) {
                    Node<E> next = x.next;
                    x.item = null;
                    x.next = null;
                    x.prev = null;
                    x = next;
                }
                first = last = null;
                size = 0;
                modCount++;
            }
            ......
        }
        
     四、LinkedList常用的方法
        package list;

        import java.util.Iterator;
        import java.util.LinkedList;

        public class LinkedListDemo {
            public static void main(String[] srgs) {
                //创建存放int类型的linkedList
                LinkedList<Integer> linkedList = new LinkedList<>();
                /************************** linkedList的基本操作 ************************/
                linkedList.addFirst(0); // 添加元素到列表开头
                linkedList.add(1); // 在列表结尾添加元素
                linkedList.add(2, 2); // 在指定位置添加元素
                linkedList.addLast(3); // 添加元素到列表结尾

                System.out.println("LinkedList（直接输出的）: " + linkedList);

                System.out.println("getFirst()获得第一个元素: " + linkedList.getFirst()); // 返回此列表的第一个元素
                System.out.println("getLast()获得第最后一个元素: " + linkedList.getLast()); // 返回此列表的最后一个元素
                System.out.println("removeFirst()删除第一个元素并返回: " + linkedList.removeFirst()); // 移除并返回此列表的第一个元素
                System.out.println("removeLast()删除最后一个元素并返回: " + linkedList.removeLast()); // 移除并返回此列表的最后一个元素
                System.out.println("After remove:" + linkedList);
                System.out.println("contains()方法判断列表是否包含1这个元素:" + linkedList.contains(1)); // 判断此列表包含指定元素，如果是，则返回true
                System.out.println("该linkedList的大小 : " + linkedList.size()); // 返回此列表的元素个数

                /************************** 位置访问操作 ************************/
                System.out.println("-----------------------------------------");
                linkedList.set(1, 3); // 将此列表中指定位置的元素替换为指定的元素
                System.out.println("After set(1, 3):" + linkedList);
                System.out.println("get(1)获得指定位置（这里为1）的元素: " + linkedList.get(1)); // 返回此列表中指定位置处的元素

                /************************** Search操作 ************************/
                System.out.println("-----------------------------------------");
                linkedList.add(3);
                System.out.println("indexOf(3): " + linkedList.indexOf(3)); // 返回此列表中首次出现的指定元素的索引
                System.out.println("lastIndexOf(3): " + linkedList.lastIndexOf(3));// 返回此列表中最后出现的指定元素的索引

                /************************** Queue操作 ************************/
                System.out.println("-----------------------------------------");
                System.out.println("peek(): " + linkedList.peek()); // 获取但不移除此列表的头
                System.out.println("element(): " + linkedList.element()); // 获取但不移除此列表的头
                linkedList.poll(); // 获取并移除此列表的头
                System.out.println("After poll():" + linkedList);
                linkedList.remove();
                System.out.println("After remove():" + linkedList); // 获取并移除此列表的头
                linkedList.offer(4);
                System.out.println("After offer(4):" + linkedList); // 将指定元素添加到此列表的末尾

                /************************** Deque操作 ************************/
                System.out.println("-----------------------------------------");
                linkedList.offerFirst(2); // 在此列表的开头插入指定的元素
                System.out.println("After offerFirst(2):" + linkedList);
                linkedList.offerLast(5); // 在此列表末尾插入指定的元素
                System.out.println("After offerLast(5):" + linkedList);
                System.out.println("peekFirst(): " + linkedList.peekFirst()); // 获取但不移除此列表的第一个元素
                System.out.println("peekLast(): " + linkedList.peekLast()); // 获取但不移除此列表的第一个元素
                linkedList.pollFirst(); // 获取并移除此列表的第一个元素
                System.out.println("After pollFirst():" + linkedList);
                linkedList.pollLast(); // 获取并移除此列表的最后一个元素
                System.out.println("After pollLast():" + linkedList);
                linkedList.push(2); // 将元素推入此列表所表示的堆栈（插入到列表的头）
                System.out.println("After push(2):" + linkedList);
                linkedList.pop(); // 从此列表所表示的堆栈处弹出一个元素（获取并移除列表第一个元素）
                System.out.println("After pop():" + linkedList);
                linkedList.add(3);
                linkedList.removeFirstOccurrence(3); // 从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表）
                System.out.println("After removeFirstOccurrence(3):" + linkedList);
                linkedList.removeLastOccurrence(3); // 从此列表中移除最后一次出现的指定元素（从尾部到头部遍历列表）
                System.out.println("After removeFirstOccurrence(3):" + linkedList);

                /************************** 遍历操作 ************************/
                System.out.println("-----------------------------------------");
                linkedList.clear();
                for (int i = 0; i < 100000; i++) {
                    linkedList.add(i);
                }
                // 迭代器遍历
                long start = System.currentTimeMillis();
                Iterator<Integer> iterator = linkedList.iterator();
                while (iterator.hasNext()) {
                    iterator.next();
                }
                long end = System.currentTimeMillis();
                System.out.println("Iterator：" + (end - start) + " ms");

                // 顺序遍历(随机遍历)
                start = System.currentTimeMillis();
                for (int i = 0; i < linkedList.size(); i++) {
                    linkedList.get(i);
                }
                end = System.currentTimeMillis();
                System.out.println("for：" + (end - start) + " ms");

                // 另一种for循环遍历
                start = System.currentTimeMillis();
                for (Integer i : linkedList)
                    ;
                end = System.currentTimeMillis();
                System.out.println("for2：" + (end - start) + " ms");

                // 通过pollFirst()或pollLast()来遍历LinkedList
                LinkedList<Integer> temp1 = new LinkedList<>();
                temp1.addAll(linkedList);
                start = System.currentTimeMillis();
                while (temp1.size() != 0) {
                    temp1.pollFirst();
                }
                end = System.currentTimeMillis();
                System.out.println("pollFirst()或pollLast()：" + (end - start) + " ms");

                // 通过removeFirst()或removeLast()来遍历LinkedList
                LinkedList<Integer> temp2 = new LinkedList<>();
                temp2.addAll(linkedList);
                start = System.currentTimeMillis();
                while (temp2.size() != 0) {
                    temp2.removeFirst();
                }
                end = System.currentTimeMillis();
                System.out.println("removeFirst()或removeLast()：" + (end - start) + " ms");
            }
        }
