这次将详细的介绍这个ArrayList类。

回忆一下：
  Collection接口下有List、Set接口。List接口下有ArrayList/Vector/LinkedList。
  Set接口下有HashSet/TreeSet。Queue接口下有LinkedList等。
  
  Map接口下有HashMap/HashTable/TreeMap。
  
  集合是java最基础重要的内容。集合的作用是以一定的方式组织、存储数据。
  Vector是线程安全的ArrayList。Stack继承自Vector。他们三者有相同的数据结构，
  都是数组实现的。
  
  探究集合从以下几点：思路方式
  (1)底层数据结构
  (2)增删改查方式
  (3)初始容量 扩容方式 扩容时机
  (4)线程安全与否
  (5)是否允许为空 是否允许重复 是否有序
  
  arrayList是动态数组，动态就是大小是可变的。可以存储null元素。

  每个arrayList的初始容量为10。扩容机制：每次添加元素时，都会检查是否需要扩容，扩容操作是数据向新数组的重新拷贝。
  所以，初始化指定容量大小，可以避免很多扩容拷贝问题和性能消耗。

  ArrayList是不同步的，线程不安全。防止意外对列表进行不同步的访问：List list = Collections.synchronizedList(new ArrayList<>(0));
  
  好，正式开始。加油啊，你还很菜啊。菜鸡。
  
 一、 ArrayList简介
    底层是动态数组，容量动态增长。
    大家都知道既然是动态增长，那就是随着往ArrayList中添加元素，其容量也会自动增长。自动增长会带来数据向新数组的重新拷贝(每当向数组中添加元素时，都要去检查
    添加后的元素个数是否会超过当前数组的长度，如果超过，数据将进行扩容，以满足添加数据的需求，而每次数组容量的增长大约是其原容量的1.5倍);
    所以 ，代价其实是很高的。
    解决办法:
      可以预知数据量的前提下,(1) 可在构造ArrayList时指定其容量 
                                new ArrayList(100);
                           (2) 手动使用ensureCapacity操作来增加ArrayList实例的容量。可以减少递增式再分配的数量。
                                list = new ArrayList();
                                list.ensureCapacity(capacity);// 预先设置list大小(实际容量)
    ArrayList继承于AbstractList，实现了List，RandomAccess，Cloneable，java.io.Serializable接口。
    
    ArrayList 线性表是顺序存储，插入删除元素的时间复杂度为O(n)，求  表长、增加元素、取第i个元素的时间复杂度为O(1)
    
    ArrayList extends AbstractList 表示 它是数组队列，有相关的添加 删除 修改 遍历等功能
    ArrayList implements RandomAccess ，【RandomAccess】是一个标志接口，表示实现这个接口的List集合是支持 【快速随机访问】的。
        我们可以通过元素序号获取到元素就是 【快速随机访问】
    ArrayList implements Cloneable接口，即覆盖了clone()，能【被克隆】。
    ArrayList implements java.io.Serializable接口，这意味着ArrayList支持【序列化】，能通过序列化去传输。
    
    和Vector不同，ArrayList中的操作是线程不安全的。所以，在单线程中使用ArrayList，多线程中可以选择Vector或CopyOnWriteArrayList。
    
    二、ArrayList核心代码
      /************************************************************************************************/
      package java.util;

      import java.util.function.Consumer;
      import java.util.function.Predicate;
      import java.util.function.UnaryOperator;

      public class ArrayList<E> extends AbstractList<E>
              implements List<E>, RandomAccess, Cloneable, java.io.Serializable
      {
          private static final long serialVersionUID = 8683452581122892189L;

          /**
           * 默认初始容量大小
           */
          private static final int DEFAULT_CAPACITY = 10;

          /**
           * 空数组应用于空实例
           */
          private static final Object[] EMPTY_ELEMENTDATA = {};

          /**
           *  用于默认大小空实例的共享空数组
           *  我们把它跟 EMPTY_ELEMENTDATA区分开来，便于知道在添加第一个元素时容量需要增加多少。
           */
          private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

          /**
           * 存储ArrayList元素的数组缓冲区。
           * 数组的容量是这个缓冲区的长度。
           * 当添加第一个元素时，elementData和默认容量空数组相等的列表
           * 将被拓展为默认长度10。
           */
          transient Object[] elementData; // non-private to simplify nested class access

          /**
           *  ArrayList包含元素个数
           * @serial
           */
          private int size;

          /**
           * 带初始容量参数的构造函数。（用户自己指定容量）
           *
           * @param  指定容量大小
           * @throws 参数异常
           */
          public ArrayList(int initialCapacity) {
              if (initialCapacity > 0) {
                  this.elementData = new Object[initialCapacity];
              } else if (initialCapacity == 0) {
                  this.elementData = EMPTY_ELEMENTDATA;
              } else {
                  throw new IllegalArgumentException("Illegal Capacity: "+
                                                     initialCapacity);
              }
          }

          /**
           * 默认构造函数，默认大小的空数组
           */
          public ArrayList() {
              this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
          }

          /**
           * 构造方法，包含一个集合的元素，这些元素是从集合中遍历出来的。
           *
           * @param collection c 
           * @throws 空指针
           */
          public ArrayList(Collection<? extends E> c) {
              elementData = c.toArray();
              //如果指定集合元素个数不为0
              if ((size = elementData.length) != 0) {
                  // c.toArray 可能返回的不是Object类型的数组，所以反射判断，反射里面的getClass()方法
                  if (elementData.getClass() != Object[].class)
                      elementData = Arrays.copyOf(elementData, size, Object[].class);
              } else {
                  // 若为0 则用空数组代替
                  this.elementData = EMPTY_ELEMENTDATA;
              }
          }

          /**
           * 修改这个ArrayList实例的容量，修改为是列表的当前元素个数(size)。 
           * 应用程序可以使用此操作来最小化ArrayList实例的存储容量。 
           */
          public void trimToSize() {
              modCount++;
              // 元素个数 < 数组长度
              if (size < elementData.length) {
                  elementData = (size == 0)
                    ? EMPTY_ELEMENTDATA
                    : Arrays.copyOf(elementData, size); // 直接生成指定元素个数的大小容量的数组
              }
          }

          /**
           * ArrayList的扩容机制
           * 如果每次只扩充一个，那么频繁的插入会导致频繁的拷贝，降低性能。
           * 扩容机制避免了这个问题
           *
           * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量
           * @param  所需的最小容量
           */
          public void ensureCapacity(int minCapacity) {
              int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
                  // any size if not default element table
                  ? 0
                  // larger than default for default empty table. It's already
                  // supposed to be at default size.
                  : DEFAULT_CAPACITY;

              if (minCapacity > minExpand) {
                  // 确定显式容量
                  ensureExplicitCapacity(minCapacity);
              }
          }

          // 得到最小扩容量
          private void ensureCapacityInternal(int minCapacity) {
              // 若数组=默认容量空数组，则取默认值和入参的最大值作为最小值。
              if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
                  minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
              }
              // 否则直接用入参做最小值
              ensureExplicitCapacity(minCapacity);
          }

          // 确定是否需要扩容
          private void ensureExplicitCapacity(int minCapacity) {
              modCount++;

              // overflow-conscious code  入参设置最小容量 > 当前数组的长度，则扩容
              if (minCapacity - elementData.length > 0)
                  //调用grow方法进行扩容，调用此方法代表已经开始扩容了
                  grow(minCapacity);
          }

          /**
           *  要分配的最大数组大小
           */
          private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

          /**
           * 扩容核心方法
           */
          private void grow(int minCapacity) {
              // 当前数组的长度，即旧容量
              int oldCapacity = elementData.length;
              // 新容量
              // 将oldCapacity 右移一位，其效果相当于oldCapacity /2，
              // 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，
              int newCapacity = oldCapacity + (oldCapacity >> 1);
              
              // 然后检查【新容量】 < 【入参需要最小容量】，若是，取入参需要最小容量为新容量。反正取大值。
              if (newCapacity - minCapacity < 0)
                  newCapacity = minCapacity;
              
              //再检查【新容量】 是否超出了ArrayList所定义的最大容量，若超出，要么是Integer.Max_VALUE  -8 ，要么是Interger.MAX_VALUE
              if (newCapacity - MAX_ARRAY_SIZE > 0) 
                  newCapacity = hugeCapacity(minCapacity); 
              
              // 重新复制生成新数组，设置新容量
              elementData = Arrays.copyOf(elementData, newCapacity);
          }
          
          // 返回 Integer.MAX_VALUE 或 Integer.MAX_VALUE - 8；大容量
          private static int hugeCapacity(int minCapacity) {
              if (minCapacity < 0) // overflow
                  throw new OutOfMemoryError();
              return (minCapacity > MAX_ARRAY_SIZE) ?
                  Integer.MAX_VALUE :
                  MAX_ARRAY_SIZE;
          }

          /**
           * 返回数组中的元素数量
           */
          public int size() {
              return size;
          }

          /**
           * 如果数组中没有元素 则返回true
           */
          public boolean isEmpty() {
              return size == 0;
          }

          /**
           * 如果此列表包含指定的元素，则返回true 。
           */
          public boolean contains(Object o) {
              return indexOf(o) >= 0;
          }

          /**
           * 返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1 。
           * 循环数组去查
           */
          public int indexOf(Object o) {
              if (o == null) {
                  for (int i = 0; i < size; i++)
                      if (elementData[i]==null)
                          return i;
              } else {
                  for (int i = 0; i < size; i++)
                      if (o.equals(elementData[i]))
                          return i;
              }
              return -1;
          }

          /**
           * 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。.
           */
          public int lastIndexOf(Object o) {
              if (o == null) {
                  for (int i = size-1; i >= 0; i--)
                      if (elementData[i]==null)
                          return i;
              } else {
                  for (int i = size-1; i >= 0; i--)
                      if (o.equals(elementData[i]))
                          return i;
              }
              return -1;
          }

          /**
           * 返回此ArrayList实例的浅拷贝。 （元素本身不被复制。）
           */
          public Object clone() {
              try {
                  ArrayList<?> v = (ArrayList<?>) super.clone();
                  
                  // Arrays.copyOf功能是实现数组的复制，返回复制后的数组。参数是被复制的数组和复制的长度
                  v.elementData = Arrays.copyOf(elementData, size);
                  v.modCount = 0;
                  return v;
              } catch (CloneNotSupportedException e) {
                  // 这不应该发生，因为我们是可以克隆的
                  throw new InternalError(e);
              }
          }

          /**
           * 以正确的顺序(从第一个到最后一个)返回一个包含列表中所有元素的数组
           *
           * 返回的数组将是安全的，列表不会保留对它的引用。因为返回的不是一个引用，而是返回的是新数组。
           * 调用者可以自由的修改返回的数组。
           *
           * 此方法是 基于阵列 和 基于集合的API之间的桥梁
           */
          public Object[] toArray() {
              return Arrays.copyOf(elementData, size);
          }

          /**
           * 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）;  
           * 
           * 如果当前传入的数组的长度 < 当前list的长度，就直接返回新数组。
           *如果传入的数组长度大于list长度，list的元素复制进来了。数组后面的元素从size开始，都是 null 了
           *
           * （这仅在调用者知道列表不包含任何空元素的情况下才能确定列表的长度。）
           *
           * 一般在需要将List转成Array的时候，都是调用 Bean arr[] = list.toArray(new Bean[0]);
           */
          @SuppressWarnings("unchecked")
          public <T> T[] toArray(T[] a) {
              if (a.length < size)
                  // Make a new array of a's runtime type, but my contents:
                  return (T[]) Arrays.copyOf(elementData, size, a.getClass());
              System.arraycopy(elementData, 0, a, 0, size);
              if (a.length > size)
                  a[size] = null;
              return a;
          }

          // Positional Access Operations

          @SuppressWarnings("unchecked")
          E elementData(int index) {
              return (E) elementData[index];
          }

          /**
           * 返回此列表中指定位置的元素。
           */
          public E get(int index) {
              rangeCheck(index);

              return elementData(index);
          }

          /**
           *  用指定的元素替换此列表中指定位置的元素。 
           */
          public E set(int index, E element) {
              //对index进行界限检查
              rangeCheck(index);

              E oldValue = elementData(index);
              elementData[index] = element;
              //返回原来在这个位置的元素
              return oldValue;
          }

          /**
           *  将指定的元素追加到此列表的末尾。 
           *
           * @param e element to be appended to this list
           * @return <tt>true</tt> (as specified by {@link Collection#add})
           */
          public boolean add(E e) {
              ensureCapacityInternal(size + 1);  // Increments modCount!!
              //这里看到ArrayList添加元素的实质就相当于为数组赋值
              elementData[size++] = e;
              return true;
          }

          /**
           * 在此列表中的指定位置插入指定的元素。 
           * 先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；
           * 再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。
           */
          public void add(int index, E element) {
              rangeCheckForAdd(index);

              ensureCapacityInternal(size + 1);  // Increments modCount!!
              
              //arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己。
              // 把index这个位置给空出来
              System.arraycopy(elementData, index, elementData, index + 1,
                               size - index);
              elementData[index] = element;
              size++;
          }

          /**
           * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。 
           */
          public E remove(int index) {
              rangeCheck(index);

              modCount++;
              E oldValue = elementData(index);

              int numMoved = size - index - 1;
              if (numMoved > 0)
                  System.arraycopy(elementData, index+1, elementData, index,
                                   numMoved);
              elementData[--size] = null; // clear to let GC do its work
              // 从列表中删除的元素 
              return oldValue;
          }

          /**
           * 从列表中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。
           * 返回true，如果此列表包含指定的元素
           */
          public boolean remove(Object o) {
              if (o == null) {
                  for (int index = 0; index < size; index++)
                      if (elementData[index] == null) {
                          fastRemove(index);
                          return true;
                      }
              } else {
                  for (int index = 0; index < size; index++)
                      if (o.equals(elementData[index])) {
                          fastRemove(index);
                          return true;
                      }
              }
              return false;
          }

          /*
           * 私有remove方法跳过了数组边界校验，不会返回被删除的元素。
           */
          private void fastRemove(int index) {
              modCount++;
              int numMoved = size - index - 1;
              if (numMoved > 0)
                  System.arraycopy(elementData, index+1, elementData, index,
                                   numMoved);
              elementData[--size] = null; // clear to let GC do its work
          }

          /**
           * 从列表中删除所有元素。
           */
          public void clear() {
              modCount++;

              // clear to let GC do its work
              for (int i = 0; i < size; i++)
                  // 把数组中所有的元素的值设为null
                  elementData[i] = null;

              size = 0;
          }

          /**
           * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。
           */
          public boolean addAll(Collection<? extends E> c) {
              Object[] a = c.toArray();
              int numNew = a.length;
              ensureCapacityInternal(size + numNew);  // Increments modCount
              // 复制出新数组
              System.arraycopy(a, 0, elementData, size, numNew);
              size += numNew;
              return numNew != 0;
          }

          /**
           * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。
           */
          public boolean addAll(int index, Collection<? extends E> c) {
              rangeCheckForAdd(index);

              Object[] a = c.toArray();
              int numNew = a.length;
              ensureCapacityInternal(size + numNew);  // Increments modCount

              int numMoved = size - index;
              if (numMoved > 0)
                  System.arraycopy(elementData, index, elementData, index + numNew,
                                   numMoved);

              System.arraycopy(a, 0, elementData, index, numNew);
              size += numNew;
              return numNew != 0;
          }

          /**
           * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。
           * 将任何后续元素移动到左侧（减少其索引）。
           */
          protected void removeRange(int fromIndex, int toIndex) {
              modCount++;
              int numMoved = size - toIndex;
              System.arraycopy(elementData, toIndex, elementData, fromIndex,
                               numMoved);

              // clear to let GC do its work
              int newSize = size - (toIndex-fromIndex);
              for (int i = newSize; i < size; i++) {
                  elementData[i] = null;
              }
              size = newSize;
          }

          /**
           * 检查给定的索引是否在范围内。
           */
          private void rangeCheck(int index) {
              if (index >= size)
                  throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
          }

          /**
           * add和addAll使用的rangeCheck的一个版本
           */
          private void rangeCheckForAdd(int index) {
              if (index > size || index < 0)
                  throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
          }

          /**
           * 返回IndexOutOfBoundsException细节信息=>索引+SIZE
           */
          private String outOfBoundsMsg(int index) {
              return "Index: "+index+", Size: "+size;
          }

          /**
           * 从此列表中删除指定集合中包含的所有元素。 false表示删除入参集合中的元素
           */
          public boolean removeAll(Collection<?> c) {
              Objects.requireNonNull(c);
              return batchRemove(c, false);
          }

          /**
           *  仅保留此列表中包含在指定集合中的元素。true表示删除没有在入参集合中的元素。
           *  换句话说，从此列表中删除其中不包含在指定集合中的所有元素。
           */
          public boolean retainAll(Collection<?> c) {
              Objects.requireNonNull(c);
              return batchRemove(c, true);
          }

          /**
          *以后再研究
          *
          **/
          private boolean batchRemove(Collection<?> c, boolean complement) {
              final Object[] elementData = this.elementData;
              int r = 0, w = 0;
              boolean modified = false;
              try {
                  for (; r < size; r++)
                      // 若complement为false，则是没有在C中的元素往前面挪。若为true，则是在C中的元素往前面挪。并且W为往前挪的元素个数。r=size-1
                      if (c.contains(elementData[r]) == complement)
                          elementData[w++] = elementData[r];
              } finally {
                  // Preserve behavioral compatibility with AbstractCollection,
                  // even if c.contains() throws.
                  if (r != size) {
                      System.arraycopy(elementData, r,
                                       elementData, w,
                                       size - r);
                      w += size - r;
                  }
                  if (w != size) {
                      // clear to let GC do its work
                      for (int i = w; i < size; i++)
                          elementData[i] = null;
                      modCount += size - w;
                      size = w;
                      modified = true;
                  }
              }
              return modified;
          }

          /**
           * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。
           * 指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。 
           * 返回的列表迭代器是fail-fast 。 
           */
          public ListIterator<E> listIterator(int index) {
              if (index < 0 || index > size)
                  throw new IndexOutOfBoundsException("Index: "+index);
              return new ListItr(index);
          }

          /**
           * 返回列表中的列表迭代器（按适当的顺序）。 
           * 返回的列表迭代器是fail-fast 。
           */
          public ListIterator<E> listIterator() {
              return new ListItr(0);
          }

          /**
           * 以正确的顺序返回该列表中的元素的迭代器。 
           * 返回的迭代器是fail-fast 。 
           */
          public Iterator<E> iterator() {
              return new Itr();
          }
          
          .......还有其他方法
      }
      /************************************************************************************************/
      
      总算是看完了这部分的方法，完全是逻辑。头昏脑涨。
      
      现在来分析分析
   三、ArrayList源码分析
   
      1、System.arraycopy()和Arrays.copyOf()方法  
        通过上面的源码可以看到这2个方法用的很多很巧妙。
        了解System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length);
                            (原数组，复制起始位置，目标数组，放置起始位置，复制长度
        下面的add(int index,E element)用到arraycopy方法让数组自己复制自己实现让index之后的元素后移了一个位置。
                    /**
                     * 在此列表中的指定位置插入指定的元素。 
                     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；
                     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。
                     */
                    public void add(int index, E element) {
                        rangeCheckForAdd(index);

                        ensureCapacityInternal(size + 1);  // Increments modCount!!
                        //arraycopy()方法实现数组自己复制自己
                        //elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的放置起始位置； size - index：要复制的数组元素的数量；
                        System.arraycopy(elementData, index, elementData, index + 1, size - index);
                        elementData[index] = element;
                        size++;
                    }
                    
        又比如在toArray()方法中用到了Arrays.copyOf()方法
                    /**
                     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 
                     *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。
                     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。
                     */
                    public Object[] toArray() {
                    //elementData：要复制的数组；size：要复制的长度
                        return Arrays.copyOf(elementData, size);
                    }
        两者区别联系：
            联系：copyOf()内部调用arraycopy()方法
            区别：arraycopy需要目标数组，将原数组拷贝到自定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组的位置
                  copyOf是系统在内部新建新数组，并返回该数组
  
        2、ArrayList核心扩容技术
          因为ArrayList是动态数组，意思就是动态的修改容量。
          正常逻辑=>每次添加一个元素时，都会去检查容量是否满足，不满足则+1。而且每次都是新建新数组来完成容量的动态增加。
          所以，频繁的插入 会导致频繁的拷贝，性能会大大降低。
          此时，就有扩容技术的出现，来避免这种情况。  
            下面是源码：
                      // minCapacity：所需最小容量
                      public void ensureCapacity(int minCapacity) {
                          int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)//当前数组 != 默认空数组,最小扩展为0，否则为默认值
                              ? 0
                              : DEFAULT_CAPACITY;

                          if (minCapacity > minExpand) {
                              ensureExplicitCapacity(minCapacity);
                          }
                      }
                      
                      // 得到最小扩容量
                      private void ensureCapacityInternal(int minCapacity) {
                          if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
                              minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
                          }

                          ensureExplicitCapacity(minCapacity);
                      }
                上述两个方法都用到了ensureExplicitCapacity()
                      private void ensureExplicitCapacity(int minCapacity) {
                          modCount++;
                          
                          if (minCapacity - elementData.length > 0)
                              grow(minCapacity);
                      }
               如果说minCapacity(所需最小容量)大于ArrayList数组的长度，就要调用 grow()方法扩容。 
               这个所需最小容量到底是多少呢？举个例子：add(e)方法中的minCapacity就是数组长度+1.
               下面重点是grow(minCapacity)
                    /**
                     * ArrayList扩容的核心方法。
                     */
                    private void grow(int minCapacity) {
                            //elementData为保存ArrayList数据的数组
                            ///elementData.length求数组长度elementData.size是求数组中的元素个数
                            // oldCapacity为旧容量，newCapacity为新容量
                        
                        int oldCapacity = elementData.length;
                        
                            //将oldCapacity 右移一位，其效果相当于oldCapacity /2，
                            //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，
                        
                        int newCapacity = oldCapacity + (oldCapacity >> 1);
                        
                        //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，
                        if (newCapacity - minCapacity < 0)
                            newCapacity = minCapacity;
                            
                        //再检查【新容量】是否超出了ArrayList所定义的最大容量2^31-1-8，
                        //若超出了，则调用hugeCapacity()来比较【所需最小容量】minCapacity和 MAX_ARRAY_SIZE(2^31-1-8)，
                        //如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE(2^31-1)，否则，新容量大小则为 MAX_ARRAY_SIZE。
                        if (newCapacity - MAX_ARRAY_SIZE > 0)
                            newCapacity = hugeCapacity(minCapacity);// 所需最小容量 > MAX_ARRAy_SIZE?Integer.MAX_VALUE:MAX_ARRAY_SIZE
                        
                        elementData = Arrays.copyOf(elementData, newCapacity);
                    }
                    
                这个机制就是1.5倍扩容。
                提醒这里面有个位运算：移位运算符就是在二进制的基础上对数字进行平移。
                按照平移的方向和填充数字的规则分为三种:<<(左移)、>>(带符号右移)和>>>(无符号右移)。
                作用：对于大数据的2进制运算,位移运算符比那些普通运算符的运算要快很多,因为程序仅仅移动一下而已,不去计算,这样提高了效率,节省了资源 　
                1000=8  1000>>=0100=4
                比如这里：int newCapacity = oldCapacity + (oldCapacity >> 1); 
                右移一位相当于除2，右移n位相当于除以 2 的 n 次方。
                这里 oldCapacity 明显右移了1位所以相当于oldCapacity /2。
                GOOD！
                
                还有需要注意的是：
                  java的length属性是针对数组说的，数组长度length
                  java的length()方法是针对字符串String说的，字符串的长度
                  java中的size()方法是针对泛型集合说的，集合中有多少元素。
                  
                  
          3.ArrayList中的内部类
              (1)private class Itr implements Iterator<E>
                  Itr实现了Iterator接口，重写了hasNext() next() remove()
                  
              (2)private class ListItr extends Itr implements ListIterator<E>
                  ListItr 继承 Itr，实现了ListIterator接口，同时重写了hasPrevious()， nextIndex()， previousIndex()， previous()， 
                  set(E e)， add(E e) 
                  
              (3)private class SubList extends AbstractList<E> implements RandomAccess
              (4)static final class ArrayListSpliterator<E> implements Spliterator<E>
              
              从上述可以看出 Iterator和ListIterator的区别: ListIterator在Iterator的基础上增加了添加对象，修改对象，逆向遍历等方法
              
              
              
       ArrayList经典用法：
       
        package list;
        import java.util.ArrayList;
        import java.util.Iterator;

        public class ArrayListDemo {

            public static void main(String[] srgs){
                 ArrayList<Integer> arrayList = new ArrayList<Integer>();

                 System.out.printf("Before add:arrayList.size() = %d\n",arrayList.size());

                 arrayList.add(1);
                 arrayList.add(3);
                 arrayList.add(5);
                 arrayList.add(7);
                 arrayList.add(9);
                 System.out.printf("After add:arrayList.size() = %d\n",arrayList.size());

                 System.out.println("Printing elements of arrayList");
                 // 三种遍历方式打印元素
                 // 第一种：通过迭代器遍历
                 System.out.print("通过迭代器遍历:");
                 Iterator<Integer> it = arrayList.iterator();
                 while(it.hasNext()){
                     System.out.print(it.next() + " ");
                 }
                 System.out.println();

                 // 第二种：通过索引值遍历
                 System.out.print("通过索引值遍历:");
                 for(int i = 0; i < arrayList.size(); i++){
                     System.out.print(arrayList.get(i) + " ");
                 }
                 System.out.println();

                 // 第三种：for循环遍历
                 System.out.print("for循环遍历:");
                 for(Integer number : arrayList){
                     System.out.print(number + " ");
                 }

                 // toArray用法
                 // 第一种方式(最常用)
                 Integer[] integer = arrayList.toArray(new Integer[0]);

                 // 第二种方式(容易理解)
                 Integer[] integer1 = new Integer[arrayList.size()];
                 arrayList.toArray(integer1);

                 // 抛出异常，java不支持向下转型
                 //Integer[] integer2 = new Integer[arrayList.size()];
                 //integer2 = arrayList.toArray();
                 System.out.println();

                 // 在指定位置添加元素
                 arrayList.add(2,2);
                 // 删除指定位置上的元素
                 arrayList.remove(2);    
                 // 删除指定元素
                 arrayList.remove((Object)3);
                 // 判断arrayList是否包含5
                 System.out.println("ArrayList contains 5 is: " + arrayList.contains(5));

                 // 清空ArrayList
                 arrayList.clear();
                 // 判断ArrayList是否为空
                 System.out.println("ArrayList is empty: " + arrayList.isEmpty());
            }
        }
        
        其中，迭代器个人用的较少
              Iterator<Integer> it = arrayList.iterator();
                 while(it.hasNext()){
                     System.out.print(it.next() + " ");
                 }
                 
          转化为数组第一个方法也用的少。
              Integer[] array = arrayList.toArray(new Integer[0]);
              
