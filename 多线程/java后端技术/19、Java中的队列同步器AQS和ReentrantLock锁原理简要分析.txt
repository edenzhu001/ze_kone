一、Lock接口
    在之前的小节中，
    介绍了如何使用Lock实现和synchronized关键字类似的同步功能，只是Lock在使用时需要显式地获取和释放锁，synchronized实现的隐式的获取所和释放锁。

    虽然没有隐式的去加锁和释放锁，但是 手动加锁释放锁，
    这样可以拥有获取锁和释放锁的可操作性，可中断的获取锁，超时获取锁等多个synchronized不能实现的功能。
    
    1.java8中locks包下的类：
      concurrent并发包下：
      
      AbstarctQueuedSynchronizer---->AbstractOwnableSynchronizer<------AbstractQueuedLongSynchronizer
      
      ReentrantReadWriteLock------>ReadWriteLock
      
      ReentrantLock ---> Lock
      
   从上述描述中，Lock接口实现主要有：ReentrantLock，其中ReentrantLock中使用了AbstractQueuedSynchronizer(队列同步器)AQS
   
   2.Lock类的接口设计
    lock()获取锁，当获取到锁后，该方法返回。
    lockInterruptibly()可以中断的获取锁，该方法会响应中断，即在锁的获取中可以中断当前线程。
    newCondition(),
    tryLock()尝试非阻塞的获取锁，调用后立即返回，获取到锁返回true，否则返回false.
    tryLock(long time,TimeUnit unit)在超时时间内获取到锁；在超时时间内中断；超时时间结束返回false。
    unLock()释放锁
    
二、队列同步容器AQS
    
     队列同步器AbstarctQueuedSynchronizer(AQS)是用来构建锁或者其他同步组件的基础框架。
     它使用一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作。
     
     (1)使用锁同步共享变量时，要知道这个变量的状态(是否被其他线程锁住)，int成员变量的作用
     (2)既然是同步共享资源，肯定会有一些线程无法获取到共享资源等待获取锁 而进入一个容器中进行保存。
     这个容器就是内置的FIFO队列。
     
     同步器主要使用方式是继承，子类通过继承实现抽象方法。
     对状态进行更改：setState getState compareAndSetState 它们能够保证状态的改变是安全的。
     
     同步器是实现锁的关键。
     ReentrantLock实现了Lock接口，ReentrantLock中使用了AQS.
     
     (1)锁和同步器很好地隔离了使用者和实现者所需关注的领域。
     
     (2)锁是面向使用者的,怎么样去操作；同步器则是实现这个锁，包括同步，线程管理等
     
     1.AbstractQueuedSynchronizer主要方法
        AQS是一个抽象类，但是没有一个抽象方法。
        
        (1)protected类别
            tryAcquire()   独占式获取锁的同步状态，实现该方法需要查询当前状态，并判断同步状态是否符合预期，然后再进行CAS设置同步状态。
            tryRelease()   独占式释放同步状态
            tryAcquireShared()  共享式获取同步状态，返回大于等于0的值，表示获取成功，反之 失败
            tryReleaseShared()  共享式释放同步状态
            isHeldExclusively()  一般表示同步器是否被当前线程所占
         源码：   
             protected boolean tryAcquire(int arg) {
                  throw new UnsupportedOperationException();
              }
              
             protected boolean tryRelease(int arg) {
                  throw new UnsupportedOperationException();
              }
              
           可以看出这些方法都是空实现抛出异常。也就是说我们必须要在子类中重写这些方法。这就是"模板方式模式"的一种体现和使用。
           
        (2)public final类别
            这类方法是final修饰的，我们可以直接用的方法。称之为"模板方法" 。
            实现自定义的同步组件，调用这些模板方法。
            常用的有：
            void acquire():独占式获取同步状态，如果当前线程获取同步状态成功，则立即返回。否则进入同步队列等待，该方法会调用tryAcquire(int arg)方法
            
            ...
            分为3类：
            独占式获取和释放同步状态 
            共享式获取和释放同步状态
            查询同步队列中的等待线程情况
            
        (3)protected final类别
            获取设置修改 这个int同步状态成员变量方法
            getState() setState(int) compareAndSetState(int,int)
            另外还有hasWaiters、getWaitQueueLength、getWaitingThreads三个方法。
            
      2.来看看AQS AbstractQueuedSynchronizer的内部类
      
        2个内部类：ConditionObject Node
      
      3.ConditionObject内部类
          (1)ConditionObject类
              在使用synchronized的时候是 wait notify来实现通信。
              ReentrantLock是通过Condition来实现通信。condition.await()  condition.signal()
              
          (2)Condition接口如下：
              await()
              awaitUninterruptibly()
              awaitNanos()
              await(long ,timeUnit)
              awaitUtil(Date)
              signal()
              signalAll()
          
          (3)ConditionObject实现了Condition接口：
          
          (4)调用ReentrantLock的newCondition方法返回的是ConditionObject对象
              public Condition newCondition() {
                  return sync.newCondition();
              }
              
              final ConditionObject newCondition() {
                  return new ConditionObject();
              }
              
      4.Node内部类
        同步器有个同步队列FIFO双向队列来完成同步状态的管理。
        当前线程获取同步状态失败时，同步器会将当前线程以及等待的线程构造成一个节点。并加入同步队列，同时会阻塞当前线程；当同步状态释放时，会把首节点
        中的线程唤醒，使其再次尝试获取同步状态。
        
        (1)同步队列的基本结构
          同步队列中的节点Node用来保存
          获取同步状态失败的线程引用、等待状态、前驱和后继节点
          Node类的成员属性
            int waitStatus  CANNELLED 值为1。由于在同步队列中等待的线程等待超时或被中断，需要从队列中取消等待，节点进入该状态将不会变化。
                            SIGNAL 值为-1。后继节点的线程处于等待状态，而当前节点的线程如果释放了同步状态或者被取消，将会通知后继节点，使得后继节点的
                            线程得以运行
                            CONDITION 值为-2 节点在等待队列中，节点线程等待在condition上。当其他线程对condition调用了signal()时，该节点将会从
                            等待队列中转义到 同步队列，加入到对同步状态的获取中。
                            PROPAGATE 
                            INITIAL z初始状态 值为0
            Node prev       前驱节点
            Node next       后继节点
            Node nextWaiter 等待队列中的后继节点，
            Thread thread   获取同步状态的线程
            
        节点是构成同步队列，同步器拥有首节点和尾节点，没有成功获取到同步状态的线程将会成为节点加入该队列的尾部。
        
        (2)由于同一时刻只有一个线程能够获取到同步锁，但可以有多个线程进入阻塞，也就是说将需要等待的线程node插入到尾部
        是需要进行同步操作的。
        使用的方法是：compareAndSetTail(Node expect, Node update) ，
        只有设置成功后，当前节点才正式与之前的节点建立关联。
        
        最重要的是我们理解他就是实现的是【队列同步】的存储功能就行，
        这个存储功能在尾部存放的是需要排队等待的线程，在头部获取的是【获取到锁的线程信息】
        
     三、ReentrantLock的设计和实现
        ReentrantLock类实现了Lock接口，
        内部类包含Sync、NonfairSync(非公平锁)、FairSync(公平锁)。
        而Sync正式继承了AQS这个抽象类，NonfairSync和FairSync继承了Sync类。
        
        AQS同步器是面向的是锁的实现者，即内部封装了锁的实现，同步队列，获取同步锁等等操作。
        Lock是锁的使用者。
        
        1.Sync内部类   AQS的方法3部分：对锁的获取释放方法 ；模板方法；同步状态的设置获取和修改
            AQS中5个protected方法，也是Sync需要重写的。
            
            Sync只是重写tryRelease() 方法，其他的留给了Sync的子类去实现了。tryAcquire()其实是在NonfairSync和FairSync上场了！
            
       2.NonfairSync和FairSync内部类
            NonfairSync和FairSync类似，这里只分析一下FairSync类。
            static final class FairSync extends Sync {
                private static final long serialVersionUID = -3000897897090466540L;

                final void lock() { // 实现了lock方法，方法中调用了AQS的acquire方法，但是在AQS的acquire方法中它调用的是tryAcquire方法。其实现就在
                                    // 下面的重写中
                    acquire(1);
                }
            
                FairSync的lock调用的AQS的acquire(),acquire()调用的是tryAcquire().
                所以真正执行的是FairSync中的tryAcquire()也就是下面的方法。

                /**
                 * 这个tryAcquire是重写了AQS中的tryAcquire。
                 */
                protected final boolean tryAcquire(int acquires) {
                    final Thread current = Thread.currentThread();
                    int c = getState();
                    if (c == 0) {
                        if (!hasQueuedPredecessors() &&
                            compareAndSetState(0, acquires)) {
                            setExclusiveOwnerThread(current);
                            return true;
                        }
                    }
                    else if (current == getExclusiveOwnerThread()) {
                        int nextc = c + acquires;
                        if (nextc < 0)
                            throw new Error("Maximum lock count exceeded");
                        setState(nextc);
                        return true;
                    }
                    return false;
                }
            }

            而我们在使用ReentrantLock时的lock() 或者unLock()实际上调动的是它的父接口Lock接口中的lock方法和unlock方法。
            而lock方法真正的实现是在Sync里面的lock()或者说是FairSync中的lock()方法
        
        
          四、ReentrantLock简易版本
          
                import java.util.concurrent.TimeUnit;
                import java.util.concurrent.locks.AbstractQueuedSynchronizer;
                import java.util.concurrent.locks.Condition;
                import java.util.concurrent.locks.Lock;

                public class MockReentrantLock<main> implements Lock {

                    private final Sync sync = new FairSync();
                    
                    /**
                    *Sync内部类
                    */
                    abstract static class Sync extends AbstractQueuedSynchronizer{

                        abstract Condition newCondition();

                        final boolean fairTryAcquire(int acquires) {
                            // 当状态为0时 获取锁
                            if (compareAndSetState(0, 1)) {
                                setExclusiveOwnerThread(Thread.currentThread());
                                return true;
                            }
                            return false;
                        }

                        @Override  // 实现AQS中的tryRelease方法
                        protected final boolean tryRelease(int releases) {
                            //  释放锁，把状态改为0
                            if (getState() == 0) {
                                //throw new Exception();
                            }
                            setExclusiveOwnerThread(null);
                            setState(0);
                            return true;
                        }
                    }

                    /**
                     * FairSync内部类
                     * 重写 是否占用状态；tryAcquire；tryRelease在Sync已经实现
                     */
                    public static class FairSync extends Sync {


                        @Override
                        protected boolean isHeldExclusively() {
                            // 是否占用状态
                            return getState() == 1;
                        }

                        @Override
                        protected boolean tryAcquire(int arg) {
                            // 当状态为0时 获取锁
                            if (compareAndSetState(0, 1)) {
                                setExclusiveOwnerThread(Thread.currentThread());
                                return true;
                            }
                            return false;
                        }

                        Condition newCondition() {
                            return new ConditionObject();
                        }

                    }

                    @Override//调用 AQS的acquire方法 其内部是tryAcquire方法。然后tryAcuqire的实现方法在内部类FairSync中
                    public void lock() {
                        sync.acquire(1);
                    }

                    @Override
                    public void unlock() {
                        sync.release(1);//调用的是AQS的release方法，但是release方法中也是tryRelease方法。实现在Sync中。
                    }

                    @Override
                    public boolean tryLock() {
                        return sync.fairTryAcquire(1);
                    }

                    @Override
                    public Condition newCondition() {
                        return sync.newCondition();
                    }

                    @Override
                    public void lockInterruptibly() throws InterruptedException {

                    }

                    @Override
                    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
                        return false;
                    }

                    public static void main(String[] args) {
                        MockReentrantLock lock = new MockReentrantLock();
                        Condition condition = lock.newCondition();

                        new Thread(() -> {
                            lock.lock();
                            try {
                                System.out.println("进入等待...");
                                condition.await();
                                System.out.println("收到通知，继续执行...");
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            } finally {
                                lock.unlock();
                            }
                        }, "Thread1").start();

                        new Thread(() -> {
                            try {
                                System.out.println("模拟3秒后，发送通知...");
                                Thread.sleep(3000);

                                lock.lock();
                                System.out.println("发送通知!");
                                condition.signal();
                                lock.unlock();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            } finally {
                                lock.unlock();
                            }
                        }, "Thread2").start();
                    }
                }
            结果：
                进入等待...
                模拟3秒后，发送通知...
                发送通知!
                收到通知，继续执行...

        总结：
        AQS成员变量int表示同步状态，同步双向队列有首节点和尾节点。
            内部类就有Node，队列中的元素
            内部类还有ConditionObject,继承了condition.拥有await() signal()方法。
            
            其中方法有3类：
                    获取释放同步状态的方法；模板方法；设置获取修改同步状态的方法
            
        ReentrantLock 实现了 Lock方法，所以要实现
            lock(调用了AQS的acquire方法，方法内部是tryAcquire,实现体在FairSync或NonFairSync中)  
            unlock(调用了AQS的release方法，，方法内部是tryRelease,实现体在Sync类中) 
            tryLock调用的是Sync中的方法。
            
            内部类有Sync继承了AQS,实现了tryRelease() 。
            内部类NonfairSync和FairSync继承了Sync类，实现了tryAcquire方法。
            
              
