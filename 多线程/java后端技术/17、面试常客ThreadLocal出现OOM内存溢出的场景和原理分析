
上节细说了ThreadLocal.
现在来说说 ThreadLocal造成OOM的情况...

一、造成OOM的实际场景：
    线程池的一个线程使用完ThreadLocal对象之后，再也不用，由于线程池中的线程不会退出，
    线程池中的线程的存在，同时ThreadLocal变量也会存在，占用内存！造成OOM溢出！
    
二、ThreadLocal为什么会内存泄漏

    1.ThreadLocal生命周期中
        ThreadLocal <----------------key
        Map       ______________>   value
        
    2.Thread来维护ThreadLocalMap中的数据。key是ThreadLcoal本身，value是Object对象
    
    3.并且ThreadLocalMap 中的key是ThreadLocal的弱引用，这个弱引用的对象会在GC的时候被回收。
    
    4.Map使用ThreadLocal的弱引用作为KEY，如果这个对象没有强引用来引用它，那么系统GC时，这个对象就会被收回。
    这样一来，map中就出现了key为null的Entry。那么这个Entry就没法被访问到。那么map中的这个key为null的Entry就会一直伴随线程声明周期。
    存在强引用链:Thread->ThreadLocalMap->Entry->value无法回收。
    
    5.总的来说就是，ThreadLocal里面使用了一个存在弱引用的map, map的类型是ThreadLocal.ThreadLocalMap.
    Map中的key为一个threadlocal实例。这个Map的确使用了弱引用，不过弱引用只是针对key。每个key都弱引用指向threadlocal。 
    当把threadlocal实例置为null以后，没有任何强引用指向threadlocal实例，所以threadlocal将会被gc回收
    
    6.ThreadLocal也有些防护措施：
    在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value。这一点在上一节中也讲到过！
    
    7.不能完全保证Ok
    （1）使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致内存泄漏。
    （2）分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏，因为这块内存一直存在。
    
    三、为什么使用弱引用，OOM是否是弱引用的锅？
      答案：不是。
      假设使用强引用。当ThreadLocal对象被回收时，如果Map中还有该对象的强引用，如果没有手动删除，ThreadLocal也将不会被回收。这样更容易导致内存泄漏。
      
      使用弱引用：
      引用的ThreadLocal的对象被回收了，
      由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。
      只是Entry中的value在下一次ThreadLocalMap调用set、get、remove的时候会被清除。
      
      相比较而言，弱引用还是能够更好的利用内存。
      
      那原因究竟是什么？
      ThreadLocal内存泄漏的根源是：
      由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。
      
   四、ThreadLocal 最佳实践
   
      1、综合上面的分析，我们可以理解ThreadLocal内存泄漏的前因后果，那么怎么避免内存泄漏呢？

      答案就是：每次使用完ThreadLocal，都调用它的remove()方法，清除数据。
      
      就跟加锁之后要解锁一样。使用完了ThreadLocal就调用remove()。
