上篇介绍了ReentrantLcok具有完全互斥排他性, 即同一时间内只有一个线程能够在执行ReentrantLock.lock()之后的程序代码任务. 

类似我们的集合中 就有 同步类容器 和 并发类容器. HashMap是线程不安全的.HashTable是线程安全的. 
但是ConcureentHashMap就可以实现同一时刻多个线程之间并发. java集合关于底层结构和线程安全问题, 日后会另起一篇说明.

为了提高效率, ReentrantLock的升级版本
ReentrantReadWriteLock就可以实现.

一、ReentrantReadWriteLock类

ReentrantReadWriteLock有两个锁, 一个是与读相关的锁, 称为 "共享锁";另一个是与写相关的锁, 称为"排他锁".
意思就是说, 多个读锁之间不互斥, 多锁与写锁互斥, 写锁与写锁互斥.

在没有线程写操作时, 进行读操作的多个线程都可以获得读锁. 而写操作的线程只有在获取到写锁后才能进行写入操作. 
即：多个线程可以同时进行读操作, 但是同一时刻只允许一个线程进行写操作. 

特性：读读共享, 写写互斥, 写读互斥, 读写互斥. 

读读共享-示例代码：

      import java.util.concurrent.locks.ReentrantReadWriteLock;

      public class ReentrantReadWriteLockTest {

          private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();

          public static void main(String[] args) {
              ReentrantReadWriteLockTest demo = new ReentrantReadWriteLockTest();
              new Thread(() -> demo.read(), "t1").start();
              new Thread(() -> demo.read(), "t2").start();
          }

          private void read() {
              try {
                  try {
                      lock.readLock().lock();
                      System.out.println(Thread.currentThread().getName() + "获得读锁，时间为："+System.currentTimeMillis());
                      //模拟读操作
                      Thread.sleep(5000);
                  } finally {
                      lock.readLock().unlock();
                  }
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      }
      结果：
      t1获得读锁，时间为：1569325391239
      t2获得读锁，时间为：1569325391239
      解析：
      可以看到t1 t2线程都获取到读锁, 基本是同时读取数据. lock.readLock().lock(); 允许多个线程同时执行lock（）方法后面的代码.
      
      写写互斥示例：
          public static void main(String[] args) {
                ReentrantReadWriteLockTest demo = new ReentrantReadWriteLockTest();
                new Thread(() -> demo.write(), "t1").start();
                new Thread(() -> demo.write(), "t2").start();
          }

            private void write(){
                try {
                    try {
                        lock.writeLock().lock();
                        System.out.println(Thread.currentThread().getName() + "获得写锁，时间为："+System.currentTimeMillis());
                        //模拟读操作
                        Thread.sleep(5000);
                    } finally {
                        lock.writeLock().unlock();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        结果：
        t1获得写锁，时间为：1569325735864
        t2获得写锁，时间为：1569325740865
        解析：
        很显然, t1线程先获得写锁, t1写操作的起始时间是35864.然后t1释放写锁. t2再获得写锁, t2写操作的起始时间是40864.然后t2释放锁.
        所以实现了同一时刻只能有一个线程进行写操作. 也说明了多线程之间是互斥的.
        
        读写互斥或写读互斥示例代码：
        
          import java.util.concurrent.locks.ReentrantReadWriteLock;

          public class ReentrantReadWriteLockTest {

              private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();

              public static void main(String[] args) throws InterruptedException {
                  ReentrantReadWriteLockTest demo = new ReentrantReadWriteLockTest();
                  new Thread(() -> demo.read(), "t1").start();
                  Thread.sleep(1000);
                  new Thread(() -> demo.write(), "t2").start();
                  new Thread(() -> demo.read(), "t3").start();
              }

              private void write(){
                  try {
                      try {
                          lock.writeLock().lock();
                          System.out.println(Thread.currentThread().getName() + "获得写锁，时间为："+System.currentTimeMillis());
                          //模拟读操作
                          Thread.sleep(5000);
                      } finally {
                          lock.writeLock().unlock();
                      }
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }

              private void read() {
                  try {
                      try {
                          lock.readLock().lock();
                          System.out.println(Thread.currentThread().getName() + "获得读锁，时间为："+System.currentTimeMillis());
                          //模拟读操作
                          Thread.sleep(3000);
                      } finally {
                          lock.readLock().unlock();
                      }
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }
          }
        结果：
        t1获得读锁，时间为：1569328370477
        t2获得写锁，时间为：1569328373477
        t3获得读锁，时间为：1569328378478
        解析：
        t1先获得读锁, 1秒后, t2 t3线程等待.
        t1的读操作耗时3秒, 3秒后, t2获得写锁,然后写操作耗时5秒, t2结束. t3获得读锁, 然后读操作, t3结束. 
        
        结合3段代码, 可以看出：
        ReentrantReadWriteLock的 读锁 和 写锁 特性：读读共享, 写写互斥, 读写互斥.
      
      
      
      
