一、概念

线程安全就是多个线程同时访问某一个类(或属性或方法)时，这个类始终是正常行为(数据不污染或数据一致)。

实现方式：
  
  多线程访问时，采用了锁机制。当一个线程访问该类某数据时，进行数据保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。
  采用synchronized修饰符实现的同步机制叫做互斥锁机制. 所获得锁叫做互斥锁. 
  
  每个对象都有一个monitor(锁标记), 当线程拥有这个锁标记时才能访问这个资源. 没有锁标记便进入锁池. 
  任何一个对象系统都会为其创建一个互斥锁, 这个锁是为了分配给线程的, 防止打断原子操作. 每个对象的锁只能分配给一个线程，因此叫做互斥锁. 
  
  可以在任何的方法或对象上加上锁， 这段加锁的代码称为"互斥区"或"临界区". 它保证了同一时刻只能有一个线程进入临界区, 同时保证共享变量的内存可见性. 

二、关键字synchronized

展示未加锁的代码：

public class MyThread extends Thread{

    private int count = 5;

    @Override
    public void run(){

            count --;

            System.out.println(count+"---"+this.currentThread().getName());
    }

    public static void main(String[] args) {

        MyThread myThread = new MyThread();

        Thread thread1 = new Thread(myThread,"T1");

        Thread thread2 = new Thread(myThread,"T2");

        Thread thread3 = new Thread(myThread,"T3");

        Thread thread4 = new Thread(myThread,"T4");

        Thread thread5 = new Thread(myThread,"T5");

        thread1.start();//线程启动的方式

        thread2.start();

        thread3.start();

        thread4.start();

        thread5.start();

    }

}

结果(由于执行的业务简单，所以线程很快处理完，需要多执行几次 才会看到异常情况)：
0---T5
2---T2
1---T4
2---T1

加锁代码：(在run方法上加上synchronized修饰符)

@Override
public synchronized void run() {
    
    count--;

    System.out.println(count + "---" + this.currentThread().getName());
}

结果：遵循递减的业务
4---T1
3---T3
2---T2
1---T5
0---T4

解释：当多个线程访问加锁的代码时，就会以排队的方式进行处理(排队以cpu分配的先后顺序定). 
线程先拿到锁, 然后可以执行加锁代码. 如果拿不到就会不断尝试,多个线程同时去竞争(锁竞争).


三、锁与对象

java中的每个对象都可以作为锁, 这是synchronized实现同步的基础.

同步普通方法，锁是当前实例对象

同步静态方法，锁是当前类的class对象

同步方法块，锁是括号里面的对象

1.上述代码就是普通同步方法示例, 同一个对象实例,因此多线程共享同一个实例锁. 普通同步方法是有弊端的. 因为可能需要同步的方法很负责，执行时间很长. 
  此时，可以采用同步代码块.

2.同步方法块(方法中的代码块)
 
 示例：
 
     @Override
    public synchronized void run() {
        synchronized(this){
            count--;
        }
        System.out.println("count:" + count + "--" + this.currentThread().getName());

    }
  但是仍然有弊端, 如果有多个synchronized同步代码块的时候，就会陷入阻塞状态，这样子会影响效率.
  可以使用同步代码块锁非this对象.(暂没理解)
  
  3.静态同步方法
  锁的是Class对象. 
  
  一个对象有一把锁，多个线程多个锁.
  
  public class MultiThread {

    private int num = 200;

    public synchronized void printNum(String threadName, String tags) {

        if ("a".equals(tags)) {

            num = num - 100;

            System.out.println(threadName + " tag a ,set num over");

        } else {

            num = num - 200;

            System.out.println(threadName + " tag b ,set num over");

        }

        System.out.println(threadName + ": tag " + tags + " , num" + num);
    }

    public static void main(String[] args) throws InterruptedException {

        final MultiThread m1 = new MultiThread();

        final MultiThread m2 = new MultiThread();

        new Thread(new Runnable() {
            @Override
            public void run() {
                m1.printNum("T1", "a");
            }
        }).start();

        Thread.sleep(5000);

        System.out.println("等待5秒，确保t1执行完毕。");

        new Thread(new Runnable() {
            @Override
            public void run() {
                m2.printNum("T2", "b");
            }
        }).start();
    }

}

结果：
T1 tag a ,set num over
T1: tag a , num100
等待5秒，确保t1执行完毕。
T2 tag b ,set num over
T2: tag b , num0

解释：关键字synchronized取得的锁都是对象锁. 哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁. 
m1, m2两个对象, 所以有两把锁. 线程获得的就是两个不同对象的锁, 他们互不影响的.

在变量和方法上加上static关键字, 对象实例锁就变成了Class锁. 两个线程共享Class锁, 实现对共享变量的线程安全操作. 
  
  
