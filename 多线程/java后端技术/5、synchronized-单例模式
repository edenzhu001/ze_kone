一、概念
在整个系统中，只存在唯一实例.

二、单例实现

  1.饿汉模式
  public static Singleton s = new Singleton();
  public Singleton getInstance(){return s;}
  
  缺陷：静态对象初始化在内存中生成，如果不使用，浪费内存资源
  
  2.懒汉模式
  public static Singleton s = null;
  public Singleton getInstance(){
    if(s == null){
      s = new Singleton();
    }
    return s;
  }
  
  缺陷: 线程安全问题. 多线程情况下, 可能有多个线程进入if判断，那就会产生多个实例.
  
  3.线程安全的懒汉模式(volatile+synchronized)
  public volatile Singleton s = null;
  public synchronized Singleton getInstance(){
    if(s == null){
      s = new Singleton();
    }
    return s;
  }
  
  缺陷：并不是每次都是需要new对象，所以大部分时间都是直接返回s，但是每次都得等待锁的释放，这是不合理的。
  
  知识点：
  volatile：使对象对所有线程可见，并且禁止对其进行指令重排序优化。
  synchronized给关键代码加锁。
  
  4.升级版本线程安全的懒汉单例(双重校验++volatile+synchronized）
  public volatile Singleton s = null;
  public Singleton getInstance(){
    if (s == null){
      synchronized (****.class){
        if(s == null){
          s = new Singleton();
        }
      }
    }
  return s;
  }
  
  5.静态内部类
    public class SingletonBuilder {
        /**
         * 私密的静态内部类
         */
        private static class Loader{
            private static Singlton s = new Singlton(); //
        }

        public static Singlton getIntance(){
            return Loader.s;
        }

        public static void main(String[] args) {
            Singlton a = SingletonBuilder.getIntance();
        }
    }
        
    优点：延迟加载(懒加载),不调用getInstance()方法不会生成实例对象; 一旦调用，生成唯一静态对象. 
        线程安全, 生成唯一静态变量, 肯定是全局唯一变量. 
        
  小总结：
  前面4中均有统一缺陷：
  （1）都需要额外的工作(Serializable、transient、readResolve())来实现序列化，否则每次反序列化一个序列化的对象实例时都会创建一个新的实例。
  （2）可能会有人使用反射强行调用我们的私有构造器（如果要避免这种情况，可以修改构造器，让它在创建第二个实例的时候抛异常）。
  
  因此：更加优雅的方法来实现单例模式，那就是枚举写法。
 * 使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。
 *
 * 更简洁，无偿地提供了串行化机制，绝对防止对此实例化，即使是在面对复杂的串行化或者反射攻击的时候。
 * 虽然这中方法还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法
 
  6.枚举类单例模式
  public enum Singleton5 {
      INSTANCE;

      public void doSomething(){
          System.out.println("do something");
      }

      public static void main(String[] args) {
          //直接调用
          Singleton5.INSTANCE.doSomething();
      }
  }
  
  优势：(1)自由串行化。(2)保证只有一个实例。(3)线程安全。
  缺陷：在需要继承的场景，它就不适用了
  


        
 
