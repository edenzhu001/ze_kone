树结构是一种很常见的数据结构。

由这边公众号文章总结一下：https://mp.weixin.qq.com/s/XN8PyiRFOyHAh6HLuTlD1Q

包含的知识点有：
前中后序遍历、二叉树、二叉搜索树、平衡二叉树，更高级一点的有红黑树、B树、B+树，字典树。

其实这些知识点应该都是大学课程中学习过的。

前中后序遍历，这个东西下次再专门搞一个小节来细说。
今天谈谈二叉树->B+树。

【二叉排序树】：左节点比根节点小，右节点比根节点大。并且左右子树都是二叉排序树。
                8
              |    |
              3     10
           |    |   |   |
         1      7   9    12
  但是在一些极端的情况下，插入序列是有序的，会造成【二叉排序树的退化】。因此二叉排序树会变成链表。方向是：由上向下14->12->...->8
                      14
                     |
                   12
                 |
               10
             |
            8

所以此时 就必须要有【平衡二叉树】：在插入时同时调整这颗树，让它的节点尽可能的均匀分布。

【红黑树】也是平衡树的一种。复杂的规则和定义都是为了保证它的平衡。

为什么要保证平衡呢？
因为树结构的查找性能取决于树的高度，让树尽可能的平衡就是降低了树的高度。
    另外：树的查找效率为O(Logn)

hashmap(数组+链表+红黑树)中将将链表转化为红黑树就是降低树的高度，提高查询性能。

【B树】的定义，搜索树。
    B树是多路搜索树，它的每个节点可以拥有多于2个的孩子节点。M路的B树最多能拥有M个孩子节点。
    如图就是3路的B树。每个节点最多可以拥有3个孩子，同样是搜索树。
    
 为什么设计成多路？
 同样的道理：为了降低高度。
 
 但是可以设计成无线多路么？无线多路退化成了有序数组了，这样有什么问题呢？
 
 联想一下，B树的应用场景：
      B树通常用在文件系统和数据库的索引。
        文件系统索引为什么要用B树而不用红黑树或有序数组呢？
      那是因为文件系统和数据库的索引都是存储在硬盘上的，如果数据量很大，不一定能够一次性全部加载到内存中。  
      正因为一棵树无法一次性加载进内存，所以此时就需要B树的多路存储，每加载B树的一个节点，然后一步步往下找。
      
      假设： 25 25 30 40 43 45  50 59  65 77 85
      假设内存一次只能加载2个数，这么长的有序数组是无法一次性加载进去的。
      将其组织为一颗三路的B树。每个节点最多有2个数。
                                      43
                             |                 |
                         25                  50,65
                     |        |        |       |       |
                 25        30,40      45      59      77,85
          比如说要找40的话，每次载入一个节点进入内存就可以了。
     
     应该了解的是：
     在内存中红黑树比B树效率更高，但涉及到磁盘操作，B树就更优了。
     
   【B+树】
    B+数就是B树的基础上进行改造，它的数据都在叶子结点，同时叶子结点之间还加指针形成链表。
    如图：4路B+树。
    为什么要设计添加上链表呢？思考。
    由场景去思考：B+树用于mysql数据库的索引。
    因为数据库select并不是一条的搜索，大部分时候都是得到结果集多条数据。
    如果是多条的话，B树可能要做部分中序遍历，可能需要跨层。
    而B+树都是数组在叶子节点，不用跨层。同时有链表结果加持，只要找到首尾就可通过链表把数据都取出来。
    
    
                 
      
   树的查找效率是log(n)  而hash存储是O(1)
   数据库的索引底层之所以是B+树，是因为
   (1)业务场景相关。如果是select一条数据，那么hash更快。但是一般来说select的结果是多条数据的结果集，B+树索引有序，又有链表相连，所以查询效率更高。
   (2)并且，数据库的索引一般都是在磁盘上，数据量大的情况下 是无法一次性加载到内存中的，B+树的设计可以允许数据分批次加载，
   同时树的高度较低，降低搜索复杂度。


数据库的知识 我还有很多需要了解 熟悉...加油 B+树。

